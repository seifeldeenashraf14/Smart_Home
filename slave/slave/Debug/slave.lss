
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000032be  00003352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800172  00800172  00003464  2**0
                  ALLOC
  3 .stab         000027fc  00000000  00000000  00003464  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e91  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000928e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <main>
      8a:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 19 	jmp	0x324c	; 0x324c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 19 	jmp	0x324c	; 0x324c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 36 19 	jmp	0x326c	; 0x326c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PORT_voidInit>:
#include "MDIO_cnfig.h"
#include "MDIO_private.h"


void PORT_voidInit (void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f e5       	ldi	r24, 0x5F	; 95
     e44:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 83       	st	Z, r24

	PORTA =PORTA_VALUE;
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1
	PORTB =PORTB_VALUE;
     e5c:	e8 e3       	ldi	r30, 0x38	; 56
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	10 82       	st	Z, r1
	PORTC =PORTC_VALUE;
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1


	PORTD = PORTD_VALUE;
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	10 82       	st	Z, r1
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <MDIO_voidSetPinDirection>:



void MDIO_voidSetPinDirection (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	27 97       	sbiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03


	if(copy_u8Mode==DIO_INTPUT)
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 23       	and	r24, r24
     e92:	09 f0       	breq	.+2      	; 0xe96 <MDIO_voidSetPinDirection+0x22>
     e94:	75 c0       	rjmp	.+234    	; 0xf80 <MDIO_voidSetPinDirection+0x10c>
	{
		switch(copy_u8Port)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3f 83       	std	Y+7, r19	; 0x07
     e9e:	2e 83       	std	Y+6, r18	; 0x06
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	9f 81       	ldd	r25, Y+7	; 0x07
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	61 f1       	breq	.+88     	; 0xf02 <MDIO_voidSetPinDirection+0x8e>
     eaa:	2e 81       	ldd	r18, Y+6	; 0x06
     eac:	3f 81       	ldd	r19, Y+7	; 0x07
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	31 05       	cpc	r19, r1
     eb2:	34 f4       	brge	.+12     	; 0xec0 <MDIO_voidSetPinDirection+0x4c>
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	69 f0       	breq	.+26     	; 0xed8 <MDIO_voidSetPinDirection+0x64>
     ebe:	d3 c0       	rjmp	.+422    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
     ec0:	2e 81       	ldd	r18, Y+6	; 0x06
     ec2:	3f 81       	ldd	r19, Y+7	; 0x07
     ec4:	23 30       	cpi	r18, 0x03	; 3
     ec6:	31 05       	cpc	r19, r1
     ec8:	89 f1       	breq	.+98     	; 0xf2c <MDIO_voidSetPinDirection+0xb8>
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	9f 81       	ldd	r25, Y+7	; 0x07
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <MDIO_voidSetPinDirection+0x62>
     ed4:	40 c0       	rjmp	.+128    	; 0xf56 <MDIO_voidSetPinDirection+0xe2>
     ed6:	c7 c0       	rjmp	.+398    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : CLR_BIT(DDRA,copy_u8Pin);break;
     ed8:	aa e3       	ldi	r26, 0x3A	; 58
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidSetPinDirection+0x82>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidSetPinDirection+0x7e>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	b2 c0       	rjmp	.+356    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : CLR_BIT(DDRB,copy_u8Pin);break;
     f02:	a7 e3       	ldi	r26, 0x37	; 55
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e3       	ldi	r30, 0x37	; 55
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <MDIO_voidSetPinDirection+0xac>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <MDIO_voidSetPinDirection+0xa8>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	9d c0       	rjmp	.+314    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : CLR_BIT(DDRC,copy_u8Pin);break;
     f2c:	a4 e3       	ldi	r26, 0x34	; 52
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e4 e3       	ldi	r30, 0x34	; 52
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <MDIO_voidSetPinDirection+0xd6>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <MDIO_voidSetPinDirection+0xd2>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	88 c0       	rjmp	.+272    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : CLR_BIT(DDRD,copy_u8Pin);break;
     f56:	a1 e3       	ldi	r26, 0x31	; 49
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 e3       	ldi	r30, 0x31	; 49
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <MDIO_voidSetPinDirection+0x100>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <MDIO_voidSetPinDirection+0xfc>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	73 c0       	rjmp	.+230    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		default : break;

		}
	}
	else if (copy_u8Mode==DIO_OUTPUT)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	09 f0       	breq	.+2      	; 0xf88 <MDIO_voidSetPinDirection+0x114>
     f86:	6f c0       	rjmp	.+222    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
	{
		switch(copy_u8Port)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3d 83       	std	Y+5, r19	; 0x05
     f90:	2c 83       	std	Y+4, r18	; 0x04
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	91 05       	cpc	r25, r1
     f9a:	51 f1       	breq	.+84     	; 0xff0 <MDIO_voidSetPinDirection+0x17c>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	23 30       	cpi	r18, 0x03	; 3
     fa2:	31 05       	cpc	r19, r1
     fa4:	34 f4       	brge	.+12     	; 0xfb2 <MDIO_voidSetPinDirection+0x13e>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	61 f0       	breq	.+24     	; 0xfc8 <MDIO_voidSetPinDirection+0x154>
     fb0:	5a c0       	rjmp	.+180    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	23 30       	cpi	r18, 0x03	; 3
     fb8:	31 05       	cpc	r19, r1
     fba:	71 f1       	breq	.+92     	; 0x1018 <MDIO_voidSetPinDirection+0x1a4>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	91 05       	cpc	r25, r1
     fc4:	e9 f1       	breq	.+122    	; 0x1040 <MDIO_voidSetPinDirection+0x1cc>
     fc6:	4f c0       	rjmp	.+158    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : SET_BIT(DDRA,copy_u8Pin);break;
     fc8:	aa e3       	ldi	r26, 0x3A	; 58
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e3       	ldi	r30, 0x3A	; 58
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <MDIO_voidSetPinDirection+0x172>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <MDIO_voidSetPinDirection+0x16e>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	3b c0       	rjmp	.+118    	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : SET_BIT(DDRB,copy_u8Pin);break;
     ff0:	a7 e3       	ldi	r26, 0x37	; 55
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e7 e3       	ldi	r30, 0x37	; 55
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <MDIO_voidSetPinDirection+0x19a>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <MDIO_voidSetPinDirection+0x196>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : SET_BIT(DDRC,copy_u8Pin);break;
    1018:	a4 e3       	ldi	r26, 0x34	; 52
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e3       	ldi	r30, 0x34	; 52
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <MDIO_voidSetPinDirection+0x1c2>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <MDIO_voidSetPinDirection+0x1be>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : SET_BIT(DDRD,copy_u8Pin);break;
    1040:	a1 e3       	ldi	r26, 0x31	; 49
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e1 e3       	ldi	r30, 0x31	; 49
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <MDIO_voidSetPinDirection+0x1ea>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <MDIO_voidSetPinDirection+0x1e6>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24

	}



}
    1066:	27 96       	adiw	r28, 0x07	; 7
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <MDIO_Error_State_tSetPinValue>:
Error_State_t MDIO_Error_State_tSetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	28 97       	sbiw	r28, 0x08	; 8
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6b 83       	std	Y+3, r22	; 0x03
    1090:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    1092:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	18 f0       	brcs	.+6      	; 0x10a0 <MDIO_Error_State_tSetPinValue+0x28>
	{
		Error_State =Return_NOK;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	ec c0       	rjmp	.+472    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
	}
	else
	{
		if(copy_u8Mode==DIO_LOW)
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <MDIO_Error_State_tSetPinValue+0x30>
    10a6:	75 c0       	rjmp	.+234    	; 0x1192 <MDIO_Error_State_tSetPinValue+0x11a>
		{
			switch(copy_u8Port)
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	38 87       	std	Y+8, r19	; 0x08
    10b0:	2f 83       	std	Y+7, r18	; 0x07
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	98 85       	ldd	r25, Y+8	; 0x08
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	91 05       	cpc	r25, r1
    10ba:	61 f1       	breq	.+88     	; 0x1114 <MDIO_Error_State_tSetPinValue+0x9c>
    10bc:	2f 81       	ldd	r18, Y+7	; 0x07
    10be:	38 85       	ldd	r19, Y+8	; 0x08
    10c0:	23 30       	cpi	r18, 0x03	; 3
    10c2:	31 05       	cpc	r19, r1
    10c4:	34 f4       	brge	.+12     	; 0x10d2 <MDIO_Error_State_tSetPinValue+0x5a>
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	69 f0       	breq	.+26     	; 0x10ea <MDIO_Error_State_tSetPinValue+0x72>
    10d0:	d3 c0       	rjmp	.+422    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
    10d2:	2f 81       	ldd	r18, Y+7	; 0x07
    10d4:	38 85       	ldd	r19, Y+8	; 0x08
    10d6:	23 30       	cpi	r18, 0x03	; 3
    10d8:	31 05       	cpc	r19, r1
    10da:	89 f1       	breq	.+98     	; 0x113e <MDIO_Error_State_tSetPinValue+0xc6>
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	91 05       	cpc	r25, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <MDIO_Error_State_tSetPinValue+0x70>
    10e6:	40 c0       	rjmp	.+128    	; 0x1168 <MDIO_Error_State_tSetPinValue+0xf0>
    10e8:	c7 c0       	rjmp	.+398    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_u8Pin);break;
    10ea:	ab e3       	ldi	r26, 0x3B	; 59
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e3       	ldi	r30, 0x3B	; 59
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <MDIO_Error_State_tSetPinValue+0x90>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <MDIO_Error_State_tSetPinValue+0x8c>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	b2 c0       	rjmp	.+356    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : CLR_BIT(PORTB,copy_u8Pin);break;
    1114:	a8 e3       	ldi	r26, 0x38	; 56
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e3       	ldi	r30, 0x38	; 56
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MDIO_Error_State_tSetPinValue+0xba>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MDIO_Error_State_tSetPinValue+0xb6>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	9d c0       	rjmp	.+314    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : CLR_BIT(PORTC,copy_u8Pin);break;
    113e:	a5 e3       	ldi	r26, 0x35	; 53
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <MDIO_Error_State_tSetPinValue+0xe4>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <MDIO_Error_State_tSetPinValue+0xe0>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	88 c0       	rjmp	.+272    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : CLR_BIT(PORTD,copy_u8Pin);break;
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <MDIO_Error_State_tSetPinValue+0x10e>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <MDIO_Error_State_tSetPinValue+0x10a>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	73 c0       	rjmp	.+230    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			default : break;

			}
		}
		else if (copy_u8Mode==DIO_HIGH)
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	09 f0       	breq	.+2      	; 0x119a <MDIO_Error_State_tSetPinValue+0x122>
    1198:	6f c0       	rjmp	.+222    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
		{
			switch(copy_u8Port)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3e 83       	std	Y+6, r19	; 0x06
    11a2:	2d 83       	std	Y+5, r18	; 0x05
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	91 05       	cpc	r25, r1
    11ac:	51 f1       	breq	.+84     	; 0x1202 <MDIO_Error_State_tSetPinValue+0x18a>
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	23 30       	cpi	r18, 0x03	; 3
    11b4:	31 05       	cpc	r19, r1
    11b6:	34 f4       	brge	.+12     	; 0x11c4 <MDIO_Error_State_tSetPinValue+0x14c>
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	61 f0       	breq	.+24     	; 0x11da <MDIO_Error_State_tSetPinValue+0x162>
    11c2:	5a c0       	rjmp	.+180    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	23 30       	cpi	r18, 0x03	; 3
    11ca:	31 05       	cpc	r19, r1
    11cc:	71 f1       	breq	.+92     	; 0x122a <MDIO_Error_State_tSetPinValue+0x1b2>
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	91 05       	cpc	r25, r1
    11d6:	e9 f1       	breq	.+122    	; 0x1252 <MDIO_Error_State_tSetPinValue+0x1da>
    11d8:	4f c0       	rjmp	.+158    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_u8Pin);break;
    11da:	ab e3       	ldi	r26, 0x3B	; 59
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <MDIO_Error_State_tSetPinValue+0x180>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <MDIO_Error_State_tSetPinValue+0x17c>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	3b c0       	rjmp	.+118    	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : SET_BIT(PORTB,copy_u8Pin);break;
    1202:	a8 e3       	ldi	r26, 0x38	; 56
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e8 e3       	ldi	r30, 0x38	; 56
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <MDIO_Error_State_tSetPinValue+0x1a8>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <MDIO_Error_State_tSetPinValue+0x1a4>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	27 c0       	rjmp	.+78     	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : SET_BIT(PORTC,copy_u8Pin);break;
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <MDIO_Error_State_tSetPinValue+0x1d0>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <MDIO_Error_State_tSetPinValue+0x1cc>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	13 c0       	rjmp	.+38     	; 0x1278 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : SET_BIT(PORTD,copy_u8Pin);break;
    1252:	a2 e3       	ldi	r26, 0x32	; 50
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e2 e3       	ldi	r30, 0x32	; 50
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <MDIO_Error_State_tSetPinValue+0x1f8>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <MDIO_Error_State_tSetPinValue+0x1f4>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24

			}

		}
	}
	return Error_State;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	28 96       	adiw	r28, 0x08	; 8
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <MDIO_Error_State_tGetPinValue>:

Error_State_t MDIO_Error_State_tGetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 *p_u8Value )
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	27 97       	sbiw	r28, 0x07	; 7
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	8a 83       	std	Y+2, r24	; 0x02
    12a2:	6b 83       	std	Y+3, r22	; 0x03
    12a4:	5d 83       	std	Y+5, r21	; 0x05
    12a6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    12a8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	18 f0       	brcs	.+6      	; 0x12b6 <MDIO_Error_State_tGetPinValue+0x2a>
	{
		Error_State =Return_NOK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	70 c0       	rjmp	.+224    	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
	}
	else
	{
		switch(copy_u8Port)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3f 83       	std	Y+7, r19	; 0x07
    12be:	2e 83       	std	Y+6, r18	; 0x06
    12c0:	4e 81       	ldd	r20, Y+6	; 0x06
    12c2:	5f 81       	ldd	r21, Y+7	; 0x07
    12c4:	42 30       	cpi	r20, 0x02	; 2
    12c6:	51 05       	cpc	r21, r1
    12c8:	59 f1       	breq	.+86     	; 0x1320 <MDIO_Error_State_tGetPinValue+0x94>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	34 f4       	brge	.+12     	; 0x12e0 <MDIO_Error_State_tGetPinValue+0x54>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	21 30       	cpi	r18, 0x01	; 1
    12da:	31 05       	cpc	r19, r1
    12dc:	69 f0       	breq	.+26     	; 0x12f8 <MDIO_Error_State_tGetPinValue+0x6c>
    12de:	5b c0       	rjmp	.+182    	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
    12e0:	4e 81       	ldd	r20, Y+6	; 0x06
    12e2:	5f 81       	ldd	r21, Y+7	; 0x07
    12e4:	43 30       	cpi	r20, 0x03	; 3
    12e6:	51 05       	cpc	r21, r1
    12e8:	79 f1       	breq	.+94     	; 0x1348 <MDIO_Error_State_tGetPinValue+0xbc>
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	91 05       	cpc	r25, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <MDIO_Error_State_tGetPinValue+0x6a>
    12f4:	3d c0       	rjmp	.+122    	; 0x1370 <MDIO_Error_State_tGetPinValue+0xe4>
    12f6:	4f c0       	rjmp	.+158    	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
		{
		case DIO_PORTA : *p_u8Value =GET_BIT(PINA,copy_u8Pin);break;
    12f8:	e9 e3       	ldi	r30, 0x39	; 57
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <MDIO_Error_State_tGetPinValue+0x84>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <MDIO_Error_State_tGetPinValue+0x80>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	80 83       	st	Z, r24
    131e:	3b c0       	rjmp	.+118    	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTB : *p_u8Value =GET_BIT(PINB,copy_u8Pin);break;
    1320:	e6 e3       	ldi	r30, 0x36	; 54
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <MDIO_Error_State_tGetPinValue+0xac>
    1334:	55 95       	asr	r21
    1336:	47 95       	ror	r20
    1338:	8a 95       	dec	r24
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <MDIO_Error_State_tGetPinValue+0xa8>
    133c:	ca 01       	movw	r24, r20
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	ec 81       	ldd	r30, Y+4	; 0x04
    1342:	fd 81       	ldd	r31, Y+5	; 0x05
    1344:	80 83       	st	Z, r24
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTC : *p_u8Value =GET_BIT(PINC,copy_u8Pin);break;
    1348:	e3 e3       	ldi	r30, 0x33	; 51
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <MDIO_Error_State_tGetPinValue+0xd4>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <MDIO_Error_State_tGetPinValue+0xd0>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	ec 81       	ldd	r30, Y+4	; 0x04
    136a:	fd 81       	ldd	r31, Y+5	; 0x05
    136c:	80 83       	st	Z, r24
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTD : *p_u8Value =GET_BIT(PIND,copy_u8Pin);break;
    1370:	e0 e3       	ldi	r30, 0x30	; 48
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <MDIO_Error_State_tGetPinValue+0xfc>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <MDIO_Error_State_tGetPinValue+0xf8>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	ec 81       	ldd	r30, Y+4	; 0x04
    1392:	fd 81       	ldd	r31, Y+5	; 0x05
    1394:	80 83       	st	Z, r24
		default : break;
		}
	}
	return Error_State;
    1396:	89 81       	ldd	r24, Y+1	; 0x01

}
    1398:	27 96       	adiw	r28, 0x07	; 7
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <MDIO_EnumSetPortValue>:

Error_State_t MDIO_EnumSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <MDIO_EnumSetPortValue+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <MDIO_EnumSetPortValue+0x8>
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    13bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	18 f0       	brcs	.+6      	; 0x13ca <MDIO_EnumSetPortValue+0x20>
	{
		Error_State = Return_NOK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	36 c0       	rjmp	.+108    	; 0x1436 <MDIO_EnumSetPortValue+0x8c>
	}
	else
	{
		switch(Copy_u8Port)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	91 05       	cpc	r25, r1
    13dc:	d9 f0       	breq	.+54     	; 0x1414 <MDIO_EnumSetPortValue+0x6a>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	23 30       	cpi	r18, 0x03	; 3
    13e4:	31 05       	cpc	r19, r1
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <MDIO_EnumSetPortValue+0x4a>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	61 f0       	breq	.+24     	; 0x140a <MDIO_EnumSetPortValue+0x60>
    13f2:	1f c0       	rjmp	.+62     	; 0x1432 <MDIO_EnumSetPortValue+0x88>
    13f4:	2c 81       	ldd	r18, Y+4	; 0x04
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	23 30       	cpi	r18, 0x03	; 3
    13fa:	31 05       	cpc	r19, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <MDIO_EnumSetPortValue+0x74>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	91 05       	cpc	r25, r1
    1406:	81 f0       	breq	.+32     	; 0x1428 <MDIO_EnumSetPortValue+0x7e>
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <MDIO_EnumSetPortValue+0x88>
		{
		case DIO_PORTA: PORTA=Copy_u8Value; break;
    140a:	eb e3       	ldi	r30, 0x3B	; 59
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	80 83       	st	Z, r24
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTB: PORTB=Copy_u8Value; break;
    1414:	e8 e3       	ldi	r30, 0x38	; 56
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 83       	st	Z, r24
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTC: PORTC=Copy_u8Value; break;
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	80 83       	st	Z, r24
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTD: PORTD=Copy_u8Value; break;
    1428:	e2 e3       	ldi	r30, 0x32	; 50
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	80 83       	st	Z, r24
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_EnumSetPortValue+0x8c>
		default: Error_State = Return_NOK; break;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <MDIO_EnumGetPortValue>:


Error_State_t MDIO_EnumGetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <MDIO_EnumGetPortValue+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <MDIO_EnumGetPortValue+0x8>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <MDIO_EnumGetPortValue+0xa>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	7c 83       	std	Y+4, r23	; 0x04
    145a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    145c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	88 30       	cpi	r24, 0x08	; 8
    1462:	18 f0       	brcs	.+6      	; 0x146a <MDIO_EnumGetPortValue+0x22>
	{
		Error_State = Return_NOK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	3e c0       	rjmp	.+124    	; 0x14e6 <MDIO_EnumGetPortValue+0x9e>
	}
	else
	{
		switch(Copy_u8Port)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3e 83       	std	Y+6, r19	; 0x06
    1472:	2d 83       	std	Y+5, r18	; 0x05
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	91 05       	cpc	r25, r1
    147c:	e9 f0       	breq	.+58     	; 0x14b8 <MDIO_EnumGetPortValue+0x70>
    147e:	2d 81       	ldd	r18, Y+5	; 0x05
    1480:	3e 81       	ldd	r19, Y+6	; 0x06
    1482:	23 30       	cpi	r18, 0x03	; 3
    1484:	31 05       	cpc	r19, r1
    1486:	34 f4       	brge	.+12     	; 0x1494 <MDIO_EnumGetPortValue+0x4c>
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	61 f0       	breq	.+24     	; 0x14aa <MDIO_EnumGetPortValue+0x62>
    1492:	27 c0       	rjmp	.+78     	; 0x14e2 <MDIO_EnumGetPortValue+0x9a>
    1494:	2d 81       	ldd	r18, Y+5	; 0x05
    1496:	3e 81       	ldd	r19, Y+6	; 0x06
    1498:	23 30       	cpi	r18, 0x03	; 3
    149a:	31 05       	cpc	r19, r1
    149c:	a1 f0       	breq	.+40     	; 0x14c6 <MDIO_EnumGetPortValue+0x7e>
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	91 05       	cpc	r25, r1
    14a6:	b1 f0       	breq	.+44     	; 0x14d4 <MDIO_EnumGetPortValue+0x8c>
    14a8:	1c c0       	rjmp	.+56     	; 0x14e2 <MDIO_EnumGetPortValue+0x9a>
		{
		case DIO_PORTA: *P_u8Value=PINA; break;
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	eb 81       	ldd	r30, Y+3	; 0x03
    14b2:	fc 81       	ldd	r31, Y+4	; 0x04
    14b4:	80 83       	st	Z, r24
    14b6:	17 c0       	rjmp	.+46     	; 0x14e6 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTB: *P_u8Value=PINB; break;
    14b8:	e6 e3       	ldi	r30, 0x36	; 54
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	eb 81       	ldd	r30, Y+3	; 0x03
    14c0:	fc 81       	ldd	r31, Y+4	; 0x04
    14c2:	80 83       	st	Z, r24
    14c4:	10 c0       	rjmp	.+32     	; 0x14e6 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTC: *P_u8Value=PINC; break;
    14c6:	e3 e3       	ldi	r30, 0x33	; 51
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	80 83       	st	Z, r24
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTD: *P_u8Value=PIND; break;
    14d4:	e0 e3       	ldi	r30, 0x30	; 48
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	eb 81       	ldd	r30, Y+3	; 0x03
    14dc:	fc 81       	ldd	r31, Y+4	; 0x04
    14de:	80 83       	st	Z, r24
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <MDIO_EnumGetPortValue+0x9e>
		default: Error_State = Return_NOK; break;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e8:	26 96       	adiw	r28, 0x06	; 6
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <MDIO_Error_state_tTogglePinValue>:

Error_State_t MDIO_Error_state_tTogglePinValue(u8 copy_u8port,u8 copy_u8pin)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <MDIO_Error_state_tTogglePinValue+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <MDIO_Error_state_tTogglePinValue+0x8>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state=Return_OK;
    150c:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8pin>PIN7)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 30       	cpi	r24, 0x08	; 8
    1512:	10 f0       	brcs	.+4      	; 0x1518 <MDIO_Error_state_tTogglePinValue+0x1e>
	{
		Error_state=Return_NOK;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	89 83       	std	Y+1, r24	; 0x01
	}
	switch (copy_u8port)
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3d 83       	std	Y+5, r19	; 0x05
    1520:	2c 83       	std	Y+4, r18	; 0x04
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	91 05       	cpc	r25, r1
    152a:	51 f1       	breq	.+84     	; 0x1580 <MDIO_Error_state_tTogglePinValue+0x86>
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	3d 81       	ldd	r19, Y+5	; 0x05
    1530:	23 30       	cpi	r18, 0x03	; 3
    1532:	31 05       	cpc	r19, r1
    1534:	34 f4       	brge	.+12     	; 0x1542 <MDIO_Error_state_tTogglePinValue+0x48>
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	61 f0       	breq	.+24     	; 0x1558 <MDIO_Error_state_tTogglePinValue+0x5e>
    1540:	5b c0       	rjmp	.+182    	; 0x15f8 <MDIO_Error_state_tTogglePinValue+0xfe>
    1542:	2c 81       	ldd	r18, Y+4	; 0x04
    1544:	3d 81       	ldd	r19, Y+5	; 0x05
    1546:	23 30       	cpi	r18, 0x03	; 3
    1548:	31 05       	cpc	r19, r1
    154a:	71 f1       	breq	.+92     	; 0x15a8 <MDIO_Error_state_tTogglePinValue+0xae>
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	91 05       	cpc	r25, r1
    1554:	e9 f1       	breq	.+122    	; 0x15d0 <MDIO_Error_state_tTogglePinValue+0xd6>
    1556:	50 c0       	rjmp	.+160    	; 0x15f8 <MDIO_Error_state_tTogglePinValue+0xfe>
	{
	case DIO_PORTA : TOG_BIT(PORTA, copy_u8pin); break;
    1558:	ab e3       	ldi	r26, 0x3B	; 59
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <MDIO_Error_state_tTogglePinValue+0x7c>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <MDIO_Error_state_tTogglePinValue+0x78>
    157a:	84 27       	eor	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	3e c0       	rjmp	.+124    	; 0x15fc <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTB : TOG_BIT(PORTB, copy_u8pin); break;
    1580:	a8 e3       	ldi	r26, 0x38	; 56
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 e3       	ldi	r30, 0x38	; 56
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <MDIO_Error_state_tTogglePinValue+0xa4>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <MDIO_Error_state_tTogglePinValue+0xa0>
    15a2:	84 27       	eor	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	2a c0       	rjmp	.+84     	; 0x15fc <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTC : TOG_BIT(PORTC, copy_u8pin); break;
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <MDIO_Error_state_tTogglePinValue+0xcc>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <MDIO_Error_state_tTogglePinValue+0xc8>
    15ca:	84 27       	eor	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	16 c0       	rjmp	.+44     	; 0x15fc <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTD : TOG_BIT(PORTD, copy_u8pin); break;
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <MDIO_Error_state_tTogglePinValue+0xf4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <MDIO_Error_state_tTogglePinValue+0xf0>
    15f2:	84 27       	eor	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <MDIO_Error_state_tTogglePinValue+0x102>
	default:  Error_state=Return_NOK; break;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <MGIE_voidEnable>:

#include "MGIE_interface.h"
#include "MGIE_registers.h"

void MGIE_voidEnable(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1616:	af e5       	ldi	r26, 0x5F	; 95
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e5       	ldi	r30, 0x5F	; 95
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <MGIE_voidDisable>:
void MGIE_voidDisable(void)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1632:	af e5       	ldi	r26, 0x5F	; 95
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e5       	ldi	r30, 0x5F	; 95
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 77       	andi	r24, 0x7F	; 127
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <MTIMER0_voidInit>:

void(*Timer0_pf_OverFLow)(void)=NULL;
void(*Timer0_pf_Compare)(void)=NULL;

void MTIMER0_voidInit (void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	OCR0=COMPARE_MATCH_VALUE;
	/* Enable ctc ISR */
	SET_BIT(TIMSK , TIMSK_OCIE0);
#elif TIMER0_MODE == TIMER0_FAST_PWM
	/*selecting  wave generation mode as fast pwm mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    164e:	a3 e5       	ldi	r26, 0x53	; 83
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e3 e5       	ldi	r30, 0x53	; 83
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    165c:	a3 e5       	ldi	r26, 0x53	; 83
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	88 60       	ori	r24, 0x08	; 8
    1668:	8c 93       	st	X, r24

	// select non inverting mode
	CLR_BIT(TCCR0,TCCR0_COM00);
    166a:	a3 e5       	ldi	r26, 0x53	; 83
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e3 e5       	ldi	r30, 0x53	; 83
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8f 7e       	andi	r24, 0xEF	; 239
    1676:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    1678:	a3 e5       	ldi	r26, 0x53	; 83
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e3 e5       	ldi	r30, 0x53	; 83
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS00);
		CLR_BIT(TCCR0,TCCR0_CS01);
		CLR_BIT(TCCR0,TCCR0_CS02);

	#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
		CLR_BIT(TCCR0,TCCR0_CS00);
    1686:	a3 e5       	ldi	r26, 0x53	; 83
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e3 e5       	ldi	r30, 0x53	; 83
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8e 7f       	andi	r24, 0xFE	; 254
    1692:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1694:	a3 e5       	ldi	r26, 0x53	; 83
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e3 e5       	ldi	r30, 0x53	; 83
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	82 60       	ori	r24, 0x02	; 2
    16a0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    16a2:	a3 e5       	ldi	r26, 0x53	; 83
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e3 e5       	ldi	r30, 0x53	; 83
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8b 7f       	andi	r24, 0xFB	; 251
    16ae:	8c 93       	st	X, r24

	#endif



}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <MTIMER0_voidEnable>:
void MTIMER0_voidEnable(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	/* SELECT TIMER0 PRESCALLER DIVISION BY 8*/
		CLR_BIT(TCCR0,TCCR0_CS00);
    16be:	a3 e5       	ldi	r26, 0x53	; 83
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e3 e5       	ldi	r30, 0x53	; 83
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8e 7f       	andi	r24, 0xFE	; 254
    16ca:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    16cc:	a3 e5       	ldi	r26, 0x53	; 83
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e3 e5       	ldi	r30, 0x53	; 83
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    16da:	a3 e5       	ldi	r26, 0x53	; 83
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e3 e5       	ldi	r30, 0x53	; 83
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8b 7f       	andi	r24, 0xFB	; 251
    16e6:	8c 93       	st	X, r24

}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <MTIMER0_voidDisable>:

void MTIMER0_voidDisable(void)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	/* NO CLK SOURCE */
	CLR_BIT(TCCR0,TCCR0_CS00);
    16f6:	a3 e5       	ldi	r26, 0x53	; 83
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e3 e5       	ldi	r30, 0x53	; 83
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8e 7f       	andi	r24, 0xFE	; 254
    1702:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    1704:	a3 e5       	ldi	r26, 0x53	; 83
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e3 e5       	ldi	r30, 0x53	; 83
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8d 7f       	andi	r24, 0xFD	; 253
    1710:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1712:	a3 e5       	ldi	r26, 0x53	; 83
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e3 e5       	ldi	r30, 0x53	; 83
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8b 7f       	andi	r24, 0xFB	; 251
    171e:	8c 93       	st	X, r24

}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload (u8 copy_u8Preload)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_u8Preload;
    1732:	e2 e5       	ldi	r30, 0x52	; 82
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	80 83       	st	Z, r24
}
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <MTIMER0_voidSetDutyCycle>:

void MTIMER0_voidSetDutyCycle(u8 Copy_u8Dutycycle){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 =Copy_u8Dutycycle ;
    174e:	ec e5       	ldi	r30, 0x5C	; 92
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	80 83       	st	Z, r24
}
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <MTIMER1_voidInit>:

void MTIMER1_voidInit (Timer1Modes_t copy_Timer1Mode,Top_t copy_Timer1TopMode,Prescaler_t copy_PrescalerValue)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	29 97       	sbiw	r28, 0x09	; 9
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
    1776:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_Timer1Mode)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	39 87       	std	Y+9, r19	; 0x09
    1780:	28 87       	std	Y+8, r18	; 0x08
    1782:	88 85       	ldd	r24, Y+8	; 0x08
    1784:	99 85       	ldd	r25, Y+9	; 0x09
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <MTIMER1_voidInit+0x30>
    178c:	5c c0       	rjmp	.+184    	; 0x1846 <MTIMER1_voidInit+0xe8>
    178e:	28 85       	ldd	r18, Y+8	; 0x08
    1790:	39 85       	ldd	r19, Y+9	; 0x09
    1792:	23 30       	cpi	r18, 0x03	; 3
    1794:	31 05       	cpc	r19, r1
    1796:	54 f4       	brge	.+20     	; 0x17ac <MTIMER1_voidInit+0x4e>
    1798:	88 85       	ldd	r24, Y+8	; 0x08
    179a:	99 85       	ldd	r25, Y+9	; 0x09
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	c9 f0       	breq	.+50     	; 0x17d2 <MTIMER1_voidInit+0x74>
    17a0:	28 85       	ldd	r18, Y+8	; 0x08
    17a2:	39 85       	ldd	r19, Y+9	; 0x09
    17a4:	21 30       	cpi	r18, 0x01	; 1
    17a6:	31 05       	cpc	r19, r1
    17a8:	89 f1       	breq	.+98     	; 0x180c <MTIMER1_voidInit+0xae>
    17aa:	c0 c0       	rjmp	.+384    	; 0x192c <MTIMER1_voidInit+0x1ce>
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	99 85       	ldd	r25, Y+9	; 0x09
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <MTIMER1_voidInit+0x5a>
    17b6:	81 c0       	rjmp	.+258    	; 0x18ba <MTIMER1_voidInit+0x15c>
    17b8:	28 85       	ldd	r18, Y+8	; 0x08
    17ba:	39 85       	ldd	r19, Y+9	; 0x09
    17bc:	24 30       	cpi	r18, 0x04	; 4
    17be:	31 05       	cpc	r19, r1
    17c0:	0c f4       	brge	.+2      	; 0x17c4 <MTIMER1_voidInit+0x66>
    17c2:	5e c0       	rjmp	.+188    	; 0x1880 <MTIMER1_voidInit+0x122>
    17c4:	88 85       	ldd	r24, Y+8	; 0x08
    17c6:	99 85       	ldd	r25, Y+9	; 0x09
    17c8:	85 30       	cpi	r24, 0x05	; 5
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <MTIMER1_voidInit+0x72>
    17ce:	92 c0       	rjmp	.+292    	; 0x18f4 <MTIMER1_voidInit+0x196>
    17d0:	ad c0       	rjmp	.+346    	; 0x192c <MTIMER1_voidInit+0x1ce>
	{
	case NORMAL_MODE:CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    17d2:	af e4       	ldi	r26, 0x4F	; 79
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ef e4       	ldi	r30, 0x4F	; 79
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7b       	andi	r24, 0xBF	; 191
    17de:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    17e0:	af e4       	ldi	r26, 0x4F	; 79
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ef e4       	ldi	r30, 0x4F	; 79
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7e       	andi	r24, 0xEF	; 239
    17ec:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    17ee:	af e4       	ldi	r26, 0x4F	; 79
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ef e4       	ldi	r30, 0x4F	; 79
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 77       	andi	r24, 0x7F	; 127
    17fa:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    17fc:	af e4       	ldi	r26, 0x4F	; 79
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ef e4       	ldi	r30, 0x4F	; 79
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	8c 93       	st	X, r24
    180a:	90 c0       	rjmp	.+288    	; 0x192c <MTIMER1_voidInit+0x1ce>
	                 break;
	case CTC_TOGGLE:CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    180c:	af e4       	ldi	r26, 0x4F	; 79
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ef e4       	ldi	r30, 0x4F	; 79
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8f 7b       	andi	r24, 0xBF	; 191
    1818:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B0);
    181a:	af e4       	ldi	r26, 0x4F	; 79
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ef e4       	ldi	r30, 0x4F	; 79
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 61       	ori	r24, 0x10	; 16
    1826:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    1828:	af e4       	ldi	r26, 0x4F	; 79
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ef e4       	ldi	r30, 0x4F	; 79
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 77       	andi	r24, 0x7F	; 127
    1834:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    1836:	af e4       	ldi	r26, 0x4F	; 79
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	ef e4       	ldi	r30, 0x4F	; 79
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 7d       	andi	r24, 0xDF	; 223
    1842:	8c 93       	st	X, r24
    1844:	73 c0       	rjmp	.+230    	; 0x192c <MTIMER1_voidInit+0x1ce>
                    break;
	case CTC_SET :  SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1846:	af e4       	ldi	r26, 0x4F	; 79
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	ef e4       	ldi	r30, 0x4F	; 79
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 64       	ori	r24, 0x40	; 64
    1852:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1854:	af e4       	ldi	r26, 0x4F	; 79
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ef e4       	ldi	r30, 0x4F	; 79
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 61       	ori	r24, 0x10	; 16
    1860:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1862:	af e4       	ldi	r26, 0x4F	; 79
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ef e4       	ldi	r30, 0x4F	; 79
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1870:	af e4       	ldi	r26, 0x4F	; 79
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ef e4       	ldi	r30, 0x4F	; 79
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	8c 93       	st	X, r24
    187e:	56 c0       	rjmp	.+172    	; 0x192c <MTIMER1_voidInit+0x1ce>
                    break;
	case CTC_CLR :  CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1880:	af e4       	ldi	r26, 0x4F	; 79
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ef e4       	ldi	r30, 0x4F	; 79
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8f 7b       	andi	r24, 0xBF	; 191
    188c:	8c 93       	st	X, r24
	                CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    188e:	af e4       	ldi	r26, 0x4F	; 79
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ef e4       	ldi	r30, 0x4F	; 79
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8f 7e       	andi	r24, 0xEF	; 239
    189a:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    189c:	af e4       	ldi	r26, 0x4F	; 79
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ef e4       	ldi	r30, 0x4F	; 79
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	80 68       	ori	r24, 0x80	; 128
    18a8:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B1);
    18aa:	af e4       	ldi	r26, 0x4F	; 79
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ef e4       	ldi	r30, 0x4F	; 79
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 62       	ori	r24, 0x20	; 32
    18b6:	8c 93       	st	X, r24
    18b8:	39 c0       	rjmp	.+114    	; 0x192c <MTIMER1_voidInit+0x1ce>
                    break;
	case FAST_PWM_NON_INVERTING :
		           CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    18ba:	af e4       	ldi	r26, 0x4F	; 79
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ef e4       	ldi	r30, 0x4F	; 79
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7b       	andi	r24, 0xBF	; 191
    18c6:	8c 93       	st	X, r24
                   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    18c8:	af e4       	ldi	r26, 0x4F	; 79
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ef e4       	ldi	r30, 0x4F	; 79
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 7e       	andi	r24, 0xEF	; 239
    18d4:	8c 93       	st	X, r24
                   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    18d6:	af e4       	ldi	r26, 0x4F	; 79
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	ef e4       	ldi	r30, 0x4F	; 79
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 68       	ori	r24, 0x80	; 128
    18e2:	8c 93       	st	X, r24
                   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    18e4:	af e4       	ldi	r26, 0x4F	; 79
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ef e4       	ldi	r30, 0x4F	; 79
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 62       	ori	r24, 0x20	; 32
    18f0:	8c 93       	st	X, r24
    18f2:	1c c0       	rjmp	.+56     	; 0x192c <MTIMER1_voidInit+0x1ce>
                   break;
	case FAST_PWM_INVERTING :
		            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    18f4:	af e4       	ldi	r26, 0x4F	; 79
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ef e4       	ldi	r30, 0x4F	; 79
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 64       	ori	r24, 0x40	; 64
    1900:	8c 93       	st	X, r24
			        SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1902:	af e4       	ldi	r26, 0x4F	; 79
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ef e4       	ldi	r30, 0x4F	; 79
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 61       	ori	r24, 0x10	; 16
    190e:	8c 93       	st	X, r24
	                SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1910:	af e4       	ldi	r26, 0x4F	; 79
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ef e4       	ldi	r30, 0x4F	; 79
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	8c 93       	st	X, r24
	                SET_BIT(TCCR1A,TCCR1A_COM1B1);
    191e:	af e4       	ldi	r26, 0x4F	; 79
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ef e4       	ldi	r30, 0x4F	; 79
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 62       	ori	r24, 0x20	; 32
    192a:	8c 93       	st	X, r24
	                break;
	default:break;

	}
	switch (copy_Timer1TopMode)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3f 83       	std	Y+7, r19	; 0x07
    1934:	2e 83       	std	Y+6, r18	; 0x06
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	9f 81       	ldd	r25, Y+7	; 0x07
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	b9 f0       	breq	.+46     	; 0x196e <MTIMER1_voidInit+0x210>
    1940:	2e 81       	ldd	r18, Y+6	; 0x06
    1942:	3f 81       	ldd	r19, Y+7	; 0x07
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	2c f4       	brge	.+10     	; 0x1954 <MTIMER1_voidInit+0x1f6>
    194a:	8e 81       	ldd	r24, Y+6	; 0x06
    194c:	9f 81       	ldd	r25, Y+7	; 0x07
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	59 f1       	breq	.+86     	; 0x19a8 <MTIMER1_voidInit+0x24a>
    1952:	80 c0       	rjmp	.+256    	; 0x1a54 <MTIMER1_voidInit+0x2f6>
    1954:	2e 81       	ldd	r18, Y+6	; 0x06
    1956:	3f 81       	ldd	r19, Y+7	; 0x07
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <MTIMER1_voidInit+0x202>
    195e:	41 c0       	rjmp	.+130    	; 0x19e2 <MTIMER1_voidInit+0x284>
    1960:	8e 81       	ldd	r24, Y+6	; 0x06
    1962:	9f 81       	ldd	r25, Y+7	; 0x07
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <MTIMER1_voidInit+0x20e>
    196a:	58 c0       	rjmp	.+176    	; 0x1a1c <MTIMER1_voidInit+0x2be>
    196c:	73 c0       	rjmp	.+230    	; 0x1a54 <MTIMER1_voidInit+0x2f6>
	{
	case TOP_CTC_ICR1:
		            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    196e:	af e4       	ldi	r26, 0x4F	; 79
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ef e4       	ldi	r30, 0x4F	; 79
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8e 7f       	andi	r24, 0xFE	; 254
    197a:	8c 93       	st	X, r24
		            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    197c:	af e4       	ldi	r26, 0x4F	; 79
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ef e4       	ldi	r30, 0x4F	; 79
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_WGM12);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	88 60       	ori	r24, 0x08	; 8
    1996:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_WGM13);
    1998:	ae e4       	ldi	r26, 0x4E	; 78
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ee e4       	ldi	r30, 0x4E	; 78
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 61       	ori	r24, 0x10	; 16
    19a4:	8c 93       	st	X, r24
    19a6:	56 c0       	rjmp	.+172    	; 0x1a54 <MTIMER1_voidInit+0x2f6>
		            break;
	case TOP_CTC_OCR1A:
			        CLR_BIT(TCCR1A,TCCR1A_WGM10);
    19a8:	af e4       	ldi	r26, 0x4F	; 79
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e4       	ldi	r30, 0x4F	; 79
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8e 7f       	andi	r24, 0xFE	; 254
    19b4:	8c 93       	st	X, r24
			        CLR_BIT(TCCR1A,TCCR1A_WGM11);
    19b6:	af e4       	ldi	r26, 0x4F	; 79
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8d 7f       	andi	r24, 0xFD	; 253
    19c2:	8c 93       	st	X, r24
			        SET_BIT(TCCR1B,TCCR1B_WGM12);
    19c4:	ae e4       	ldi	r26, 0x4E	; 78
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ee e4       	ldi	r30, 0x4E	; 78
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 60       	ori	r24, 0x08	; 8
    19d0:	8c 93       	st	X, r24
			        CLR_BIT(TCCR1B,TCCR1B_WGM13);
    19d2:	ae e4       	ldi	r26, 0x4E	; 78
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ee e4       	ldi	r30, 0x4E	; 78
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 7e       	andi	r24, 0xEF	; 239
    19de:	8c 93       	st	X, r24
    19e0:	39 c0       	rjmp	.+114    	; 0x1a54 <MTIMER1_voidInit+0x2f6>
			        break;
	case TOP_FPWM_ICR1:
		             CLR_BIT(TCCR1A,TCCR1A_WGM10);
    19e2:	af e4       	ldi	r26, 0x4F	; 79
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ef e4       	ldi	r30, 0x4F	; 79
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	8c 93       	st	X, r24
		             SET_BIT(TCCR1A,TCCR1A_WGM11);
    19f0:	af e4       	ldi	r26, 0x4F	; 79
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ef e4       	ldi	r30, 0x4F	; 79
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	82 60       	ori	r24, 0x02	; 2
    19fc:	8c 93       	st	X, r24
				     SET_BIT(TCCR1B,TCCR1B_WGM12);
    19fe:	ae e4       	ldi	r26, 0x4E	; 78
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ee e4       	ldi	r30, 0x4E	; 78
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 60       	ori	r24, 0x08	; 8
    1a0a:	8c 93       	st	X, r24
				     SET_BIT(TCCR1B,TCCR1B_WGM13);
    1a0c:	ae e4       	ldi	r26, 0x4E	; 78
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ee e4       	ldi	r30, 0x4E	; 78
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	8c 93       	st	X, r24
    1a1a:	1c c0       	rjmp	.+56     	; 0x1a54 <MTIMER1_voidInit+0x2f6>
				     break;
	case TOP_FPWM_OCR1A:
		             SET_BIT(TCCR1A,TCCR1A_WGM10);
    1a1c:	af e4       	ldi	r26, 0x4F	; 79
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ef e4       	ldi	r30, 0x4F	; 79
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	81 60       	ori	r24, 0x01	; 1
    1a28:	8c 93       	st	X, r24
			         SET_BIT(TCCR1A,TCCR1A_WGM11);
    1a2a:	af e4       	ldi	r26, 0x4F	; 79
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ef e4       	ldi	r30, 0x4F	; 79
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	82 60       	ori	r24, 0x02	; 2
    1a36:	8c 93       	st	X, r24
					 SET_BIT(TCCR1B,TCCR1B_WGM12);
    1a38:	ae e4       	ldi	r26, 0x4E	; 78
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ee e4       	ldi	r30, 0x4E	; 78
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 60       	ori	r24, 0x08	; 8
    1a44:	8c 93       	st	X, r24
					 SET_BIT(TCCR1B,TCCR1B_WGM13);
    1a46:	ae e4       	ldi	r26, 0x4E	; 78
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ee e4       	ldi	r30, 0x4E	; 78
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 61       	ori	r24, 0x10	; 16
    1a52:	8c 93       	st	X, r24
					 break;
	default: break;

	}
	switch (copy_PrescalerValue)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3d 83       	std	Y+5, r19	; 0x05
    1a5c:	2c 83       	std	Y+4, r18	; 0x04
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	91 05       	cpc	r25, r1
    1a66:	01 f1       	breq	.+64     	; 0x1aa8 <MTIMER1_voidInit+0x34a>
    1a68:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	89 f1       	breq	.+98     	; 0x1ad4 <MTIMER1_voidInit+0x376>
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9d 81       	ldd	r25, Y+5	; 0x05
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <MTIMER1_voidInit+0x31e>
    1a7a:	41 c0       	rjmp	.+130    	; 0x1afe <MTIMER1_voidInit+0x3a0>
	{
	case DIV_8 :
                    CLR_BIT(TCCR1B,TCCR1B_CS10);
    1a7c:	ae e4       	ldi	r26, 0x4E	; 78
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ee e4       	ldi	r30, 0x4E	; 78
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8e 7f       	andi	r24, 0xFE	; 254
    1a88:	8c 93       	st	X, r24
                    SET_BIT(TCCR1B,TCCR1B_CS11);
    1a8a:	ae e4       	ldi	r26, 0x4E	; 78
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ee e4       	ldi	r30, 0x4E	; 78
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	82 60       	ori	r24, 0x02	; 2
    1a96:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1B,TCCR1B_CS12);
    1a98:	ae e4       	ldi	r26, 0x4E	; 78
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ee e4       	ldi	r30, 0x4E	; 78
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8b 7f       	andi	r24, 0xFB	; 251
    1aa4:	8c 93       	st	X, r24
    1aa6:	2b c0       	rjmp	.+86     	; 0x1afe <MTIMER1_voidInit+0x3a0>
                    break;
	case DIV_64 :
		            SET_BIT(TCCR1B,TCCR1B_CS10);
    1aa8:	ae e4       	ldi	r26, 0x4E	; 78
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ee e4       	ldi	r30, 0x4E	; 78
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	81 60       	ori	r24, 0x01	; 1
    1ab4:	8c 93       	st	X, r24
	                SET_BIT(TCCR1B,TCCR1B_CS11);
    1ab6:	ae e4       	ldi	r26, 0x4E	; 78
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ee e4       	ldi	r30, 0x4E	; 78
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	8c 93       	st	X, r24
	                CLR_BIT(TCCR1B,TCCR1B_CS12);
    1ac4:	ae e4       	ldi	r26, 0x4E	; 78
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ee e4       	ldi	r30, 0x4E	; 78
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8b 7f       	andi	r24, 0xFB	; 251
    1ad0:	8c 93       	st	X, r24
    1ad2:	15 c0       	rjmp	.+42     	; 0x1afe <MTIMER1_voidInit+0x3a0>
	                break;
	case DIV_256 :
		            CLR_BIT(TCCR1B,TCCR1B_CS10);
    1ad4:	ae e4       	ldi	r26, 0x4E	; 78
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ee e4       	ldi	r30, 0x4E	; 78
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8e 7f       	andi	r24, 0xFE	; 254
    1ae0:	8c 93       	st	X, r24
		            CLR_BIT(TCCR1B,TCCR1B_CS11);
    1ae2:	ae e4       	ldi	r26, 0x4E	; 78
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	ee e4       	ldi	r30, 0x4E	; 78
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8d 7f       	andi	r24, 0xFD	; 253
    1aee:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_CS12);
    1af0:	ae e4       	ldi	r26, 0x4E	; 78
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e4       	ldi	r30, 0x4E	; 78
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	84 60       	ori	r24, 0x04	; 4
    1afc:	8c 93       	st	X, r24
		            break;
	default: break;

	}

}
    1afe:	29 96       	adiw	r28, 0x09	; 9
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue (u16 copu_u16TopValue,Top_t copy_Timer1TopMode)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <MTIMER1_voidSetTopValue+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <MTIMER1_voidSetTopValue+0x8>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_Timer1TopMode)
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3d 83       	std	Y+5, r19	; 0x05
    1b2c:	2c 83       	std	Y+4, r18	; 0x04
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	91 05       	cpc	r25, r1
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <MTIMER1_voidSetTopValue+0x34>
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	23 30       	cpi	r18, 0x03	; 3
    1b3e:	31 05       	cpc	r19, r1
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <MTIMER1_voidSetTopValue+0x42>
    1b42:	0d c0       	rjmp	.+26     	; 0x1b5e <MTIMER1_voidSetTopValue+0x4e>
	{
	case TOP_FPWM_ICR1: ICR1=copu_u16TopValue;break;
    1b44:	e6 e4       	ldi	r30, 0x46	; 70
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_OCR1A: OCR1A=copu_u16TopValue;break;
    1b52:	ea e4       	ldi	r30, 0x4A	; 74
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
	default :break;
	}


}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 copy_u16DutyCycleValue)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <MTIMER1_voidSetDutyCycle+0x6>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	 OCR1A=copy_u16DutyCycleValue;
    1b7c:	ea e4       	ldi	r30, 0x4A	; 74
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <SPI_voidInitMaster>:
#include "BIT_MATH.h"
#include "SPI_config.h"
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_register.h"
void SPI_voidInitMaster(void){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    1b9a:	ad e2       	ldi	r26, 0x2D	; 45
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ed e2       	ldi	r30, 0x2D	; 45
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 61       	ori	r24, 0x10	; 16
    1ba6:	8c 93       	st	X, r24
SET_BIT(SPCR,SPCR_SPR0);
    1ba8:	ad e2       	ldi	r26, 0x2D	; 45
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ed e2       	ldi	r30, 0x2D	; 45
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 60       	ori	r24, 0x01	; 1
    1bb4:	8c 93       	st	X, r24
CLR_BIT(SPCR,SPCR_SPR1);
    1bb6:	ad e2       	ldi	r26, 0x2D	; 45
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ed e2       	ldi	r30, 0x2D	; 45
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8d 7f       	andi	r24, 0xFD	; 253
    1bc2:	8c 93       	st	X, r24
CLR_BIT(SPSR,SPSR_SPI2X);
    1bc4:	ae e2       	ldi	r26, 0x2E	; 46
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ee e2       	ldi	r30, 0x2E	; 46
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8e 7f       	andi	r24, 0xFE	; 254
    1bd0:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    1bd2:	ad e2       	ldi	r26, 0x2D	; 45
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ed e2       	ldi	r30, 0x2D	; 45
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 64       	ori	r24, 0x40	; 64
    1bde:	8c 93       	st	X, r24
}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <SPI_voidInitSlave>:

void SPI_voidInitSlave(void){
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    1bee:	ad e2       	ldi	r26, 0x2D	; 45
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ed e2       	ldi	r30, 0x2D	; 45
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7e       	andi	r24, 0xEF	; 239
    1bfa:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_SPE);
    1bfc:	ad e2       	ldi	r26, 0x2D	; 45
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ed e2       	ldi	r30, 0x2D	; 45
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 64       	ori	r24, 0x40	; 64
    1c08:	8c 93       	st	X, r24
}
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <SPI_u8Tranceive>:

u8 SPI_u8Tranceive (u8 Copy_u8Data){
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <SPI_u8Tranceive+0x6>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
SPDR=Copy_u8Data;
    1c1c:	ef e2       	ldi	r30, 0x2F	; 47
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	80 83       	st	Z, r24
while (GET_BIT(SPSR,SPSR_SPIF)==0);
    1c24:	ee e2       	ldi	r30, 0x2E	; 46
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z

return SPDR;
    1c2a:	ef e2       	ldi	r30, 0x2F	; 47
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z

}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <STPM_vInit>:
#include "STD_TYPES.h"
#include "MDIO_interface.h"
#include "STPM_int.h"
#include <util/delay.h>

void STPM_vInit(void) {
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	/* Disable all coils */
	STPM_vStop();
    1c42:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <STPM_vStop>
}
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <STPM_vRCW>:

void STPM_vRCW(u16 A_u16Angle) {
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	ee 97       	sbiw	r28, 0x3e	; 62
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	9e af       	std	Y+62, r25	; 0x3e
    1c62:	8d af       	std	Y+61, r24	; 0x3d
	u16 L_u16I;
	u16 L_u16Iterations = A_u16Angle / 0.17578125 / 4 + 1;
    1c64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c68:	cc 01       	movw	r24, r24
    1c6a:	a0 e0       	ldi	r26, 0x00	; 0
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	44 e3       	ldi	r20, 0x34	; 52
    1c84:	5e e3       	ldi	r21, 0x3E	; 62
    1c86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	50 e4       	ldi	r21, 0x40	; 64
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a af       	std	Y+58, r25	; 0x3a
    1cc4:	89 af       	std	Y+57, r24	; 0x39

	/* Disable all coils */
	STPM_vStop();
    1cc6:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <STPM_vStop>

	for(L_u16I = 0; L_u16I < L_u16Iterations; L_u16I++) {
    1cca:	1c ae       	std	Y+60, r1	; 0x3c
    1ccc:	1b ae       	std	Y+59, r1	; 0x3b
    1cce:	f5 c1       	rjmp	.+1002   	; 0x20ba <STPM_vRCW+0x46e>
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 ea       	ldi	r26, 0xA0	; 160
    1ce0:	b1 e4       	ldi	r27, 0x41	; 65
    1ce2:	8d ab       	std	Y+53, r24	; 0x35
    1ce4:	9e ab       	std	Y+54, r25	; 0x36
    1ce6:	af ab       	std	Y+55, r26	; 0x37
    1ce8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6d a9       	ldd	r22, Y+53	; 0x35
    1cec:	7e a9       	ldd	r23, Y+54	; 0x36
    1cee:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	89 ab       	std	Y+49, r24	; 0x31
    1d04:	9a ab       	std	Y+50, r25	; 0x32
    1d06:	ab ab       	std	Y+51, r26	; 0x33
    1d08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d10:	9c a9       	ldd	r25, Y+52	; 0x34
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <STPM_vRCW+0xe0>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 ab       	std	Y+48, r25	; 0x30
    1d28:	8f a7       	std	Y+47, r24	; 0x2f
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <STPM_vRCW+0x15e>
	else if (__tmp > 65535)
    1d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d30:	8b a9       	ldd	r24, Y+51	; 0x33
    1d32:	9c a9       	ldd	r25, Y+52	; 0x34
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <STPM_vRCW+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6d a9       	ldd	r22, Y+53	; 0x35
    1d46:	7e a9       	ldd	r23, Y+54	; 0x36
    1d48:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	98 ab       	std	Y+48, r25	; 0x30
    1d6a:	8f a7       	std	Y+47, r24	; 0x2f
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <STPM_vRCW+0x140>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9e a7       	std	Y+46, r25	; 0x2e
    1d74:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <STPM_vRCW+0x12e>
    1d7e:	9e a7       	std	Y+46, r25	; 0x2e
    1d80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d84:	98 a9       	ldd	r25, Y+48	; 0x30
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	98 ab       	std	Y+48, r25	; 0x30
    1d8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <STPM_vRCW+0x122>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <STPM_vRCW+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	69 a9       	ldd	r22, Y+49	; 0x31
    1d98:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	98 ab       	std	Y+48, r25	; 0x30
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
    1daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dac:	98 a9       	ldd	r25, Y+48	; 0x30
    1dae:	9c a7       	std	Y+44, r25	; 0x2c
    1db0:	8b a7       	std	Y+43, r24	; 0x2b
    1db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <STPM_vRCW+0x16a>
    1dba:	9c a7       	std	Y+44, r25	; 0x2c
    1dbc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for second Activation */
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_ENABLE);
    1dc8:	84 e0       	ldi	r24, 0x04	; 4
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 ea       	ldi	r26, 0xA0	; 160
    1dd8:	b1 e4       	ldi	r27, 0x41	; 65
    1dda:	8f a3       	std	Y+39, r24	; 0x27
    1ddc:	98 a7       	std	Y+40, r25	; 0x28
    1dde:	a9 a7       	std	Y+41, r26	; 0x29
    1de0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8b a3       	std	Y+35, r24	; 0x23
    1dfc:	9c a3       	std	Y+36, r25	; 0x24
    1dfe:	ad a3       	std	Y+37, r26	; 0x25
    1e00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e02:	6b a1       	ldd	r22, Y+35	; 0x23
    1e04:	7c a1       	ldd	r23, Y+36	; 0x24
    1e06:	8d a1       	ldd	r24, Y+37	; 0x25
    1e08:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <STPM_vRCW+0x1d8>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <STPM_vRCW+0x256>
	else if (__tmp > 65535)
    1e24:	6b a1       	ldd	r22, Y+35	; 0x23
    1e26:	7c a1       	ldd	r23, Y+36	; 0x24
    1e28:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <STPM_vRCW+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e40:	89 a5       	ldd	r24, Y+41	; 0x29
    1e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <STPM_vRCW+0x238>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	98 a3       	std	Y+32, r25	; 0x20
    1e6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e70:	98 a1       	ldd	r25, Y+32	; 0x20
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <STPM_vRCW+0x226>
    1e76:	98 a3       	std	Y+32, r25	; 0x20
    1e78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9a a3       	std	Y+34, r25	; 0x22
    1e82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	89 a1       	ldd	r24, Y+33	; 0x21
    1e86:	9a a1       	ldd	r25, Y+34	; 0x22
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <STPM_vRCW+0x21a>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <STPM_vRCW+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e90:	7c a1       	ldd	r23, Y+36	; 0x24
    1e92:	8d a1       	ldd	r24, Y+37	; 0x25
    1e94:	9e a1       	ldd	r25, Y+38	; 0x26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <STPM_vRCW+0x262>
    1eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_DISABLE);
    1eb6:	84 e0       	ldi	r24, 0x04	; 4
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for third Activation */
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_ENABLE);
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	66 e0       	ldi	r22, 0x06	; 6
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 ea       	ldi	r26, 0xA0	; 160
    1ed0:	b1 e4       	ldi	r27, 0x41	; 65
    1ed2:	89 8f       	std	Y+25, r24	; 0x19
    1ed4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eda:	69 8d       	ldd	r22, Y+25	; 0x19
    1edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4a ef       	ldi	r20, 0xFA	; 250
    1ee8:	54 e4       	ldi	r21, 0x44	; 68
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8d 8b       	std	Y+21, r24	; 0x15
    1ef4:	9e 8b       	std	Y+22, r25	; 0x16
    1ef6:	af 8b       	std	Y+23, r26	; 0x17
    1ef8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1efa:	6d 89       	ldd	r22, Y+21	; 0x15
    1efc:	7e 89       	ldd	r23, Y+22	; 0x16
    1efe:	8f 89       	ldd	r24, Y+23	; 0x17
    1f00:	98 8d       	ldd	r25, Y+24	; 0x18
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	2c f4       	brge	.+10     	; 0x1f1c <STPM_vRCW+0x2d0>
		__ticks = 1;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 8b       	std	Y+20, r25	; 0x14
    1f18:	8b 8b       	std	Y+19, r24	; 0x13
    1f1a:	3f c0       	rjmp	.+126    	; 0x1f9a <STPM_vRCW+0x34e>
	else if (__tmp > 65535)
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	3f ef       	ldi	r19, 0xFF	; 255
    1f28:	4f e7       	ldi	r20, 0x7F	; 127
    1f2a:	57 e4       	ldi	r21, 0x47	; 71
    1f2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f30:	18 16       	cp	r1, r24
    1f32:	4c f5       	brge	.+82     	; 0x1f86 <STPM_vRCW+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	69 8d       	ldd	r22, Y+25	; 0x19
    1f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e2       	ldi	r20, 0x20	; 32
    1f42:	51 e4       	ldi	r21, 0x41	; 65
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9c 8b       	std	Y+20, r25	; 0x14
    1f5a:	8b 8b       	std	Y+19, r24	; 0x13
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <STPM_vRCW+0x330>
    1f5e:	88 ec       	ldi	r24, 0xC8	; 200
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
    1f66:	89 89       	ldd	r24, Y+17	; 0x11
    1f68:	9a 89       	ldd	r25, Y+18	; 0x12
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <STPM_vRCW+0x31e>
    1f6e:	9a 8b       	std	Y+18, r25	; 0x12
    1f70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	8b 89       	ldd	r24, Y+19	; 0x13
    1f74:	9c 89       	ldd	r25, Y+20	; 0x14
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	9c 8b       	std	Y+20, r25	; 0x14
    1f7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <STPM_vRCW+0x312>
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <STPM_vRCW+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f86:	6d 89       	ldd	r22, Y+21	; 0x15
    1f88:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9c 8b       	std	Y+20, r25	; 0x14
    1f98:	8b 8b       	std	Y+19, r24	; 0x13
    1f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9e:	98 8b       	std	Y+16, r25	; 0x10
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f
    1fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa4:	98 89       	ldd	r25, Y+16	; 0x10
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <STPM_vRCW+0x35a>
    1faa:	98 8b       	std	Y+16, r25	; 0x10
    1fac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_DISABLE);
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	66 e0       	ldi	r22, 0x06	; 6
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
    1fb8:	84 e0       	ldi	r24, 0x04	; 4
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc8:	b1 e4       	ldi	r27, 0x41	; 65
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <STPM_vRCW+0x3c8>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <STPM_vRCW+0x446>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <STPM_vRCW+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <STPM_vRCW+0x428>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <STPM_vRCW+0x416>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <STPM_vRCW+0x40a>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <STPM_vRCW+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <STPM_vRCW+0x452>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	67 e0       	ldi	r22, 0x07	; 7
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	u16 L_u16Iterations = A_u16Angle / 0.17578125 / 4 + 1;

	/* Disable all coils */
	STPM_vStop();

	for(L_u16I = 0; L_u16I < L_u16Iterations; L_u16I++) {
    20b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    20b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9c af       	std	Y+60, r25	; 0x3c
    20b8:	8b af       	std	Y+59, r24	; 0x3b
    20ba:	2b ad       	ldd	r18, Y+59	; 0x3b
    20bc:	3c ad       	ldd	r19, Y+60	; 0x3c
    20be:	89 ad       	ldd	r24, Y+57	; 0x39
    20c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <STPM_vRCW+0x47e>
    20c8:	03 ce       	rjmp	.-1018   	; 0x1cd0 <STPM_vRCW+0x84>
		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
	}
}
    20ca:	ee 96       	adiw	r28, 0x3e	; 62
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <STPM_vRCCW>:

void STPM_vRCCW(u16 A_u16Angle) {
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	ee 97       	sbiw	r28, 0x3e	; 62
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	9e af       	std	Y+62, r25	; 0x3e
    20f2:	8d af       	std	Y+61, r24	; 0x3d
	u16 L_u16I;
	u16 L_u16Iterations = A_u16Angle / 0.17578125 / 4 + 1;
    20f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f8:	cc 01       	movw	r24, r24
    20fa:	a0 e0       	ldi	r26, 0x00	; 0
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	44 e3       	ldi	r20, 0x34	; 52
    2114:	5e e3       	ldi	r21, 0x3E	; 62
    2116:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	50 e4       	ldi	r21, 0x40	; 64
    212a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9a af       	std	Y+58, r25	; 0x3a
    2154:	89 af       	std	Y+57, r24	; 0x39

	/* Disable all coils */
	STPM_vStop();
    2156:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <STPM_vStop>

	for(L_u16I = 0; L_u16I < L_u16Iterations; L_u16I++) {
    215a:	1c ae       	std	Y+60, r1	; 0x3c
    215c:	1b ae       	std	Y+59, r1	; 0x3b
    215e:	f5 c1       	rjmp	.+1002   	; 0x254a <STPM_vRCCW+0x46e>
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	67 e0       	ldi	r22, 0x07	; 7
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a0 ea       	ldi	r26, 0xA0	; 160
    2170:	b1 e4       	ldi	r27, 0x41	; 65
    2172:	8d ab       	std	Y+53, r24	; 0x35
    2174:	9e ab       	std	Y+54, r25	; 0x36
    2176:	af ab       	std	Y+55, r26	; 0x37
    2178:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6d a9       	ldd	r22, Y+53	; 0x35
    217c:	7e a9       	ldd	r23, Y+54	; 0x36
    217e:	8f a9       	ldd	r24, Y+55	; 0x37
    2180:	98 ad       	ldd	r25, Y+56	; 0x38
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	89 ab       	std	Y+49, r24	; 0x31
    2194:	9a ab       	std	Y+50, r25	; 0x32
    2196:	ab ab       	std	Y+51, r26	; 0x33
    2198:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    219a:	69 a9       	ldd	r22, Y+49	; 0x31
    219c:	7a a9       	ldd	r23, Y+50	; 0x32
    219e:	8b a9       	ldd	r24, Y+51	; 0x33
    21a0:	9c a9       	ldd	r25, Y+52	; 0x34
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <STPM_vRCCW+0xe0>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	98 ab       	std	Y+48, r25	; 0x30
    21b8:	8f a7       	std	Y+47, r24	; 0x2f
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <STPM_vRCCW+0x15e>
	else if (__tmp > 65535)
    21bc:	69 a9       	ldd	r22, Y+49	; 0x31
    21be:	7a a9       	ldd	r23, Y+50	; 0x32
    21c0:	8b a9       	ldd	r24, Y+51	; 0x33
    21c2:	9c a9       	ldd	r25, Y+52	; 0x34
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <STPM_vRCCW+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6d a9       	ldd	r22, Y+53	; 0x35
    21d6:	7e a9       	ldd	r23, Y+54	; 0x36
    21d8:	8f a9       	ldd	r24, Y+55	; 0x37
    21da:	98 ad       	ldd	r25, Y+56	; 0x38
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	98 ab       	std	Y+48, r25	; 0x30
    21fa:	8f a7       	std	Y+47, r24	; 0x2f
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <STPM_vRCCW+0x140>
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9e a7       	std	Y+46, r25	; 0x2e
    2204:	8d a7       	std	Y+45, r24	; 0x2d
    2206:	8d a5       	ldd	r24, Y+45	; 0x2d
    2208:	9e a5       	ldd	r25, Y+46	; 0x2e
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <STPM_vRCCW+0x12e>
    220e:	9e a7       	std	Y+46, r25	; 0x2e
    2210:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	98 ab       	std	Y+48, r25	; 0x30
    221a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <STPM_vRCCW+0x122>
    2224:	14 c0       	rjmp	.+40     	; 0x224e <STPM_vRCCW+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	69 a9       	ldd	r22, Y+49	; 0x31
    2228:	7a a9       	ldd	r23, Y+50	; 0x32
    222a:	8b a9       	ldd	r24, Y+51	; 0x33
    222c:	9c a9       	ldd	r25, Y+52	; 0x34
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	98 ab       	std	Y+48, r25	; 0x30
    2238:	8f a7       	std	Y+47, r24	; 0x2f
    223a:	8f a5       	ldd	r24, Y+47	; 0x2f
    223c:	98 a9       	ldd	r25, Y+48	; 0x30
    223e:	9c a7       	std	Y+44, r25	; 0x2c
    2240:	8b a7       	std	Y+43, r24	; 0x2b
    2242:	8b a5       	ldd	r24, Y+43	; 0x2b
    2244:	9c a5       	ldd	r25, Y+44	; 0x2c
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <STPM_vRCCW+0x16a>
    224a:	9c a7       	std	Y+44, r25	; 0x2c
    224c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
    224e:	84 e0       	ldi	r24, 0x04	; 4
    2250:	67 e0       	ldi	r22, 0x07	; 7
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for second Activation */
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_ENABLE);
    2258:	84 e0       	ldi	r24, 0x04	; 4
    225a:	66 e0       	ldi	r22, 0x06	; 6
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 ea       	ldi	r26, 0xA0	; 160
    2268:	b1 e4       	ldi	r27, 0x41	; 65
    226a:	8f a3       	std	Y+39, r24	; 0x27
    226c:	98 a7       	std	Y+40, r25	; 0x28
    226e:	a9 a7       	std	Y+41, r26	; 0x29
    2270:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	6f a1       	ldd	r22, Y+39	; 0x27
    2274:	78 a5       	ldd	r23, Y+40	; 0x28
    2276:	89 a5       	ldd	r24, Y+41	; 0x29
    2278:	9a a5       	ldd	r25, Y+42	; 0x2a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a ef       	ldi	r20, 0xFA	; 250
    2280:	54 e4       	ldi	r21, 0x44	; 68
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8b a3       	std	Y+35, r24	; 0x23
    228c:	9c a3       	std	Y+36, r25	; 0x24
    228e:	ad a3       	std	Y+37, r26	; 0x25
    2290:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2292:	6b a1       	ldd	r22, Y+35	; 0x23
    2294:	7c a1       	ldd	r23, Y+36	; 0x24
    2296:	8d a1       	ldd	r24, Y+37	; 0x25
    2298:	9e a1       	ldd	r25, Y+38	; 0x26
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <STPM_vRCCW+0x1d8>
		__ticks = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9a a3       	std	Y+34, r25	; 0x22
    22b0:	89 a3       	std	Y+33, r24	; 0x21
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <STPM_vRCCW+0x256>
	else if (__tmp > 65535)
    22b4:	6b a1       	ldd	r22, Y+35	; 0x23
    22b6:	7c a1       	ldd	r23, Y+36	; 0x24
    22b8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ba:	9e a1       	ldd	r25, Y+38	; 0x26
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	4c f5       	brge	.+82     	; 0x231e <STPM_vRCCW+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	6f a1       	ldd	r22, Y+39	; 0x27
    22ce:	78 a5       	ldd	r23, Y+40	; 0x28
    22d0:	89 a5       	ldd	r24, Y+41	; 0x29
    22d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9a a3       	std	Y+34, r25	; 0x22
    22f2:	89 a3       	std	Y+33, r24	; 0x21
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <STPM_vRCCW+0x238>
    22f6:	88 ec       	ldi	r24, 0xC8	; 200
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	98 a3       	std	Y+32, r25	; 0x20
    22fc:	8f 8f       	std	Y+31, r24	; 0x1f
    22fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2300:	98 a1       	ldd	r25, Y+32	; 0x20
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <STPM_vRCCW+0x226>
    2306:	98 a3       	std	Y+32, r25	; 0x20
    2308:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	89 a1       	ldd	r24, Y+33	; 0x21
    230c:	9a a1       	ldd	r25, Y+34	; 0x22
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9a a3       	std	Y+34, r25	; 0x22
    2312:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <STPM_vRCCW+0x21a>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <STPM_vRCCW+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9a a3       	std	Y+34, r25	; 0x22
    2330:	89 a3       	std	Y+33, r24	; 0x21
    2332:	89 a1       	ldd	r24, Y+33	; 0x21
    2334:	9a a1       	ldd	r25, Y+34	; 0x22
    2336:	9e 8f       	std	Y+30, r25	; 0x1e
    2338:	8d 8f       	std	Y+29, r24	; 0x1d
    233a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <STPM_vRCCW+0x262>
    2342:	9e 8f       	std	Y+30, r25	; 0x1e
    2344:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_DISABLE);
    2346:	84 e0       	ldi	r24, 0x04	; 4
    2348:	66 e0       	ldi	r22, 0x06	; 6
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for third Activation */
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_ENABLE);
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	61 e0       	ldi	r22, 0x01	; 1
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 ea       	ldi	r26, 0xA0	; 160
    2360:	b1 e4       	ldi	r27, 0x41	; 65
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <STPM_vRCCW+0x2d0>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <STPM_vRCCW+0x34e>
	else if (__tmp > 65535)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <STPM_vRCCW+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <STPM_vRCCW+0x330>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <STPM_vRCCW+0x31e>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <STPM_vRCCW+0x312>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <STPM_vRCCW+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <STPM_vRCCW+0x35a>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_DISABLE);
    243e:	84 e0       	ldi	r24, 0x04	; 4
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
    2448:	84 e0       	ldi	r24, 0x04	; 4
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 ea       	ldi	r26, 0xA0	; 160
    2458:	b1 e4       	ldi	r27, 0x41	; 65
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <STPM_vRCCW+0x3c8>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <STPM_vRCCW+0x446>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <STPM_vRCCW+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <STPM_vRCCW+0x428>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <STPM_vRCCW+0x416>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <STPM_vRCCW+0x40a>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <STPM_vRCCW+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <STPM_vRCCW+0x452>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	u16 L_u16Iterations = A_u16Angle / 0.17578125 / 4 + 1;

	/* Disable all coils */
	STPM_vStop();

	for(L_u16I = 0; L_u16I < L_u16Iterations; L_u16I++) {
    2540:	8b ad       	ldd	r24, Y+59	; 0x3b
    2542:	9c ad       	ldd	r25, Y+60	; 0x3c
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	9c af       	std	Y+60, r25	; 0x3c
    2548:	8b af       	std	Y+59, r24	; 0x3b
    254a:	2b ad       	ldd	r18, Y+59	; 0x3b
    254c:	3c ad       	ldd	r19, Y+60	; 0x3c
    254e:	89 ad       	ldd	r24, Y+57	; 0x39
    2550:	9a ad       	ldd	r25, Y+58	; 0x3a
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	08 f4       	brcc	.+2      	; 0x255a <STPM_vRCCW+0x47e>
    2558:	03 ce       	rjmp	.-1018   	; 0x2160 <STPM_vRCCW+0x84>
		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
	}
}
    255a:	ee 96       	adiw	r28, 0x3e	; 62
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <STPM_vRotateSteps>:

void STPM_vRotateSteps(u16 A_u16Steps) {
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	ec 97       	sbiw	r28, 0x3c	; 60
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	9c af       	std	Y+60, r25	; 0x3c
    2582:	8b af       	std	Y+59, r24	; 0x3b
	u16 i;

	/* Disable all coils */
	STPM_vStop();
    2584:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <STPM_vStop>

	for(i = 0; i <= A_u16Steps; i++) {
    2588:	1a ae       	std	Y+58, r1	; 0x3a
    258a:	19 ae       	std	Y+57, r1	; 0x39
    258c:	f5 c1       	rjmp	.+1002   	; 0x2978 <STPM_vRotateSteps+0x40c>
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 ea       	ldi	r26, 0xA0	; 160
    259e:	b1 e4       	ldi	r27, 0x41	; 65
    25a0:	8d ab       	std	Y+53, r24	; 0x35
    25a2:	9e ab       	std	Y+54, r25	; 0x36
    25a4:	af ab       	std	Y+55, r26	; 0x37
    25a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6d a9       	ldd	r22, Y+53	; 0x35
    25aa:	7e a9       	ldd	r23, Y+54	; 0x36
    25ac:	8f a9       	ldd	r24, Y+55	; 0x37
    25ae:	98 ad       	ldd	r25, Y+56	; 0x38
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	89 ab       	std	Y+49, r24	; 0x31
    25c2:	9a ab       	std	Y+50, r25	; 0x32
    25c4:	ab ab       	std	Y+51, r26	; 0x33
    25c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25c8:	69 a9       	ldd	r22, Y+49	; 0x31
    25ca:	7a a9       	ldd	r23, Y+50	; 0x32
    25cc:	8b a9       	ldd	r24, Y+51	; 0x33
    25ce:	9c a9       	ldd	r25, Y+52	; 0x34
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <STPM_vRotateSteps+0x7e>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	98 ab       	std	Y+48, r25	; 0x30
    25e6:	8f a7       	std	Y+47, r24	; 0x2f
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <STPM_vRotateSteps+0xfc>
	else if (__tmp > 65535)
    25ea:	69 a9       	ldd	r22, Y+49	; 0x31
    25ec:	7a a9       	ldd	r23, Y+50	; 0x32
    25ee:	8b a9       	ldd	r24, Y+51	; 0x33
    25f0:	9c a9       	ldd	r25, Y+52	; 0x34
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <STPM_vRotateSteps+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6d a9       	ldd	r22, Y+53	; 0x35
    2604:	7e a9       	ldd	r23, Y+54	; 0x36
    2606:	8f a9       	ldd	r24, Y+55	; 0x37
    2608:	98 ad       	ldd	r25, Y+56	; 0x38
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	98 ab       	std	Y+48, r25	; 0x30
    2628:	8f a7       	std	Y+47, r24	; 0x2f
    262a:	0f c0       	rjmp	.+30     	; 0x264a <STPM_vRotateSteps+0xde>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e a7       	std	Y+46, r25	; 0x2e
    2632:	8d a7       	std	Y+45, r24	; 0x2d
    2634:	8d a5       	ldd	r24, Y+45	; 0x2d
    2636:	9e a5       	ldd	r25, Y+46	; 0x2e
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <STPM_vRotateSteps+0xcc>
    263c:	9e a7       	std	Y+46, r25	; 0x2e
    263e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	8f a5       	ldd	r24, Y+47	; 0x2f
    2642:	98 a9       	ldd	r25, Y+48	; 0x30
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	98 ab       	std	Y+48, r25	; 0x30
    2648:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	8f a5       	ldd	r24, Y+47	; 0x2f
    264c:	98 a9       	ldd	r25, Y+48	; 0x30
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <STPM_vRotateSteps+0xc0>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <STPM_vRotateSteps+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	69 a9       	ldd	r22, Y+49	; 0x31
    2656:	7a a9       	ldd	r23, Y+50	; 0x32
    2658:	8b a9       	ldd	r24, Y+51	; 0x33
    265a:	9c a9       	ldd	r25, Y+52	; 0x34
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	8f a5       	ldd	r24, Y+47	; 0x2f
    266a:	98 a9       	ldd	r25, Y+48	; 0x30
    266c:	9c a7       	std	Y+44, r25	; 0x2c
    266e:	8b a7       	std	Y+43, r24	; 0x2b
    2670:	8b a5       	ldd	r24, Y+43	; 0x2b
    2672:	9c a5       	ldd	r25, Y+44	; 0x2c
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <STPM_vRotateSteps+0x108>
    2678:	9c a7       	std	Y+44, r25	; 0x2c
    267a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
    267c:	84 e0       	ldi	r24, 0x04	; 4
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for second Activation */
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_ENABLE);
    2686:	84 e0       	ldi	r24, 0x04	; 4
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 ea       	ldi	r26, 0xA0	; 160
    2696:	b1 e4       	ldi	r27, 0x41	; 65
    2698:	8f a3       	std	Y+39, r24	; 0x27
    269a:	98 a7       	std	Y+40, r25	; 0x28
    269c:	a9 a7       	std	Y+41, r26	; 0x29
    269e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6f a1       	ldd	r22, Y+39	; 0x27
    26a2:	78 a5       	ldd	r23, Y+40	; 0x28
    26a4:	89 a5       	ldd	r24, Y+41	; 0x29
    26a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a ef       	ldi	r20, 0xFA	; 250
    26ae:	54 e4       	ldi	r21, 0x44	; 68
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8b a3       	std	Y+35, r24	; 0x23
    26ba:	9c a3       	std	Y+36, r25	; 0x24
    26bc:	ad a3       	std	Y+37, r26	; 0x25
    26be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <STPM_vRotateSteps+0x176>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9a a3       	std	Y+34, r25	; 0x22
    26de:	89 a3       	std	Y+33, r24	; 0x21
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <STPM_vRotateSteps+0x1f4>
	else if (__tmp > 65535)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <STPM_vRotateSteps+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6f a1       	ldd	r22, Y+39	; 0x27
    26fc:	78 a5       	ldd	r23, Y+40	; 0x28
    26fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2700:	9a a5       	ldd	r25, Y+42	; 0x2a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <STPM_vRotateSteps+0x1d6>
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	98 a3       	std	Y+32, r25	; 0x20
    272a:	8f 8f       	std	Y+31, r24	; 0x1f
    272c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272e:	98 a1       	ldd	r25, Y+32	; 0x20
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <STPM_vRotateSteps+0x1c4>
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <STPM_vRotateSteps+0x1b8>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <STPM_vRotateSteps+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	89 a1       	ldd	r24, Y+33	; 0x21
    2762:	9a a1       	ldd	r25, Y+34	; 0x22
    2764:	9e 8f       	std	Y+30, r25	; 0x1e
    2766:	8d 8f       	std	Y+29, r24	; 0x1d
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <STPM_vRotateSteps+0x200>
    2770:	9e 8f       	std	Y+30, r25	; 0x1e
    2772:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_DISABLE);
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for third Activation */
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_ENABLE);
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	66 e0       	ldi	r22, 0x06	; 6
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 ea       	ldi	r26, 0xA0	; 160
    278e:	b1 e4       	ldi	r27, 0x41	; 65
    2790:	89 8f       	std	Y+25, r24	; 0x19
    2792:	9a 8f       	std	Y+26, r25	; 0x1a
    2794:	ab 8f       	std	Y+27, r26	; 0x1b
    2796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <STPM_vRotateSteps+0x26e>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <STPM_vRotateSteps+0x2ec>
	else if (__tmp > 65535)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <STPM_vRotateSteps+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	0f c0       	rjmp	.+30     	; 0x283a <STPM_vRotateSteps+0x2ce>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	9a 89       	ldd	r25, Y+18	; 0x12
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <STPM_vRotateSteps+0x2bc>
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <STPM_vRotateSteps+0x2b0>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <STPM_vRotateSteps+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	98 8b       	std	Y+16, r25	; 0x10
    285e:	8f 87       	std	Y+15, r24	; 0x0f
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <STPM_vRotateSteps+0x2f8>
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_DISABLE);
    286c:	84 e0       	ldi	r24, 0x04	; 4
    286e:	66 e0       	ldi	r22, 0x06	; 6
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
    2876:	84 e0       	ldi	r24, 0x04	; 4
    2878:	67 e0       	ldi	r22, 0x07	; 7
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 ea       	ldi	r26, 0xA0	; 160
    2886:	b1 e4       	ldi	r27, 0x41	; 65
    2888:	8b 87       	std	Y+11, r24	; 0x0b
    288a:	9c 87       	std	Y+12, r25	; 0x0c
    288c:	ad 87       	std	Y+13, r26	; 0x0d
    288e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6b 85       	ldd	r22, Y+11	; 0x0b
    2892:	7c 85       	ldd	r23, Y+12	; 0x0c
    2894:	8d 85       	ldd	r24, Y+13	; 0x0d
    2896:	9e 85       	ldd	r25, Y+14	; 0x0e
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8f 83       	std	Y+7, r24	; 0x07
    28aa:	98 87       	std	Y+8, r25	; 0x08
    28ac:	a9 87       	std	Y+9, r26	; 0x09
    28ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <STPM_vRotateSteps+0x366>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <STPM_vRotateSteps+0x3e4>
	else if (__tmp > 65535)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <STPM_vRotateSteps+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <STPM_vRotateSteps+0x3c6>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <STPM_vRotateSteps+0x3b4>
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <STPM_vRotateSteps+0x3a8>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <STPM_vRotateSteps+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <STPM_vRotateSteps+0x3f0>
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
    2964:	84 e0       	ldi	r24, 0x04	; 4
    2966:	67 e0       	ldi	r22, 0x07	; 7
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	u16 i;

	/* Disable all coils */
	STPM_vStop();

	for(i = 0; i <= A_u16Steps; i++) {
    296e:	89 ad       	ldd	r24, Y+57	; 0x39
    2970:	9a ad       	ldd	r25, Y+58	; 0x3a
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	9a af       	std	Y+58, r25	; 0x3a
    2976:	89 af       	std	Y+57, r24	; 0x39
    2978:	29 ad       	ldd	r18, Y+57	; 0x39
    297a:	3a ad       	ldd	r19, Y+58	; 0x3a
    297c:	8b ad       	ldd	r24, Y+59	; 0x3b
    297e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2980:	82 17       	cp	r24, r18
    2982:	93 07       	cpc	r25, r19
    2984:	08 f0       	brcs	.+2      	; 0x2988 <STPM_vRotateSteps+0x41c>
    2986:	03 ce       	rjmp	.-1018   	; 0x258e <STPM_vRotateSteps+0x22>
		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
	}
}
    2988:	ec 96       	adiw	r28, 0x3c	; 60
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <STPM_vRotateCSteps>:

void STPM_vRotateCSteps(u16 A_u16Steps) {
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	ec 97       	sbiw	r28, 0x3c	; 60
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	9c af       	std	Y+60, r25	; 0x3c
    29b0:	8b af       	std	Y+59, r24	; 0x3b
	u16 L_u16I;

	/* Disable all coils */
	STPM_vStop();
    29b2:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <STPM_vStop>

	for(L_u16I = 0; L_u16I < A_u16Steps; L_u16I++) {
    29b6:	1a ae       	std	Y+58, r1	; 0x3a
    29b8:	19 ae       	std	Y+57, r1	; 0x39
    29ba:	f5 c1       	rjmp	.+1002   	; 0x2da6 <STPM_vRotateCSteps+0x40c>
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_ENABLE);
    29bc:	84 e0       	ldi	r24, 0x04	; 4
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 ea       	ldi	r26, 0xA0	; 160
    29cc:	b1 e4       	ldi	r27, 0x41	; 65
    29ce:	8d ab       	std	Y+53, r24	; 0x35
    29d0:	9e ab       	std	Y+54, r25	; 0x36
    29d2:	af ab       	std	Y+55, r26	; 0x37
    29d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6d a9       	ldd	r22, Y+53	; 0x35
    29d8:	7e a9       	ldd	r23, Y+54	; 0x36
    29da:	8f a9       	ldd	r24, Y+55	; 0x37
    29dc:	98 ad       	ldd	r25, Y+56	; 0x38
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	89 ab       	std	Y+49, r24	; 0x31
    29f0:	9a ab       	std	Y+50, r25	; 0x32
    29f2:	ab ab       	std	Y+51, r26	; 0x33
    29f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29f6:	69 a9       	ldd	r22, Y+49	; 0x31
    29f8:	7a a9       	ldd	r23, Y+50	; 0x32
    29fa:	8b a9       	ldd	r24, Y+51	; 0x33
    29fc:	9c a9       	ldd	r25, Y+52	; 0x34
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <STPM_vRotateCSteps+0x7e>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	98 ab       	std	Y+48, r25	; 0x30
    2a14:	8f a7       	std	Y+47, r24	; 0x2f
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <STPM_vRotateCSteps+0xfc>
	else if (__tmp > 65535)
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <STPM_vRotateCSteps+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6d a9       	ldd	r22, Y+53	; 0x35
    2a32:	7e a9       	ldd	r23, Y+54	; 0x36
    2a34:	8f a9       	ldd	r24, Y+55	; 0x37
    2a36:	98 ad       	ldd	r25, Y+56	; 0x38
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	98 ab       	std	Y+48, r25	; 0x30
    2a56:	8f a7       	std	Y+47, r24	; 0x2f
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <STPM_vRotateCSteps+0xde>
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9e a7       	std	Y+46, r25	; 0x2e
    2a60:	8d a7       	std	Y+45, r24	; 0x2d
    2a62:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a64:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <STPM_vRotateCSteps+0xcc>
    2a6a:	9e a7       	std	Y+46, r25	; 0x2e
    2a6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a70:	98 a9       	ldd	r25, Y+48	; 0x30
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	98 ab       	std	Y+48, r25	; 0x30
    2a76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <STPM_vRotateCSteps+0xc0>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <STPM_vRotateCSteps+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	69 a9       	ldd	r22, Y+49	; 0x31
    2a84:	7a a9       	ldd	r23, Y+50	; 0x32
    2a86:	8b a9       	ldd	r24, Y+51	; 0x33
    2a88:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	98 ab       	std	Y+48, r25	; 0x30
    2a94:	8f a7       	std	Y+47, r24	; 0x2f
    2a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a98:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9a:	9c a7       	std	Y+44, r25	; 0x2c
    2a9c:	8b a7       	std	Y+43, r24	; 0x2b
    2a9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <STPM_vRotateCSteps+0x108>
    2aa6:	9c a7       	std	Y+44, r25	; 0x2c
    2aa8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
    2aaa:	84 e0       	ldi	r24, 0x04	; 4
    2aac:	67 e0       	ldi	r22, 0x07	; 7
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for second Activation */
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_ENABLE);
    2ab4:	84 e0       	ldi	r24, 0x04	; 4
    2ab6:	66 e0       	ldi	r22, 0x06	; 6
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ac4:	b1 e4       	ldi	r27, 0x41	; 65
    2ac6:	8f a3       	std	Y+39, r24	; 0x27
    2ac8:	98 a7       	std	Y+40, r25	; 0x28
    2aca:	a9 a7       	std	Y+41, r26	; 0x29
    2acc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a ef       	ldi	r20, 0xFA	; 250
    2adc:	54 e4       	ldi	r21, 0x44	; 68
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8b a3       	std	Y+35, r24	; 0x23
    2ae8:	9c a3       	std	Y+36, r25	; 0x24
    2aea:	ad a3       	std	Y+37, r26	; 0x25
    2aec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aee:	6b a1       	ldd	r22, Y+35	; 0x23
    2af0:	7c a1       	ldd	r23, Y+36	; 0x24
    2af2:	8d a1       	ldd	r24, Y+37	; 0x25
    2af4:	9e a1       	ldd	r25, Y+38	; 0x26
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <STPM_vRotateCSteps+0x176>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a a3       	std	Y+34, r25	; 0x22
    2b0c:	89 a3       	std	Y+33, r24	; 0x21
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <STPM_vRotateCSteps+0x1f4>
	else if (__tmp > 65535)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <STPM_vRotateCSteps+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	6f a1       	ldd	r22, Y+39	; 0x27
    2b2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9a a3       	std	Y+34, r25	; 0x22
    2b4e:	89 a3       	std	Y+33, r24	; 0x21
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <STPM_vRotateCSteps+0x1d6>
    2b52:	88 ec       	ldi	r24, 0xC8	; 200
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	98 a3       	std	Y+32, r25	; 0x20
    2b58:	8f 8f       	std	Y+31, r24	; 0x1f
    2b5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <STPM_vRotateCSteps+0x1c4>
    2b62:	98 a3       	std	Y+32, r25	; 0x20
    2b64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	89 a1       	ldd	r24, Y+33	; 0x21
    2b68:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9a a3       	std	Y+34, r25	; 0x22
    2b6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	89 a1       	ldd	r24, Y+33	; 0x21
    2b72:	9a a1       	ldd	r25, Y+34	; 0x22
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <STPM_vRotateCSteps+0x1b8>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <STPM_vRotateCSteps+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b80:	9e a1       	ldd	r25, Y+38	; 0x26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9a a3       	std	Y+34, r25	; 0x22
    2b8c:	89 a3       	std	Y+33, r24	; 0x21
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	9a a1       	ldd	r25, Y+34	; 0x22
    2b92:	9e 8f       	std	Y+30, r25	; 0x1e
    2b94:	8d 8f       	std	Y+29, r24	; 0x1d
    2b96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <STPM_vRotateCSteps+0x200>
    2b9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_DISABLE);
    2ba2:	84 e0       	ldi	r24, 0x04	; 4
    2ba4:	66 e0       	ldi	r22, 0x06	; 6
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for third Activation */
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_ENABLE);
    2bac:	84 e0       	ldi	r24, 0x04	; 4
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 ea       	ldi	r26, 0xA0	; 160
    2bbc:	b1 e4       	ldi	r27, 0x41	; 65
    2bbe:	89 8f       	std	Y+25, r24	; 0x19
    2bc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8d 8b       	std	Y+21, r24	; 0x15
    2be0:	9e 8b       	std	Y+22, r25	; 0x16
    2be2:	af 8b       	std	Y+23, r26	; 0x17
    2be4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2be6:	6d 89       	ldd	r22, Y+21	; 0x15
    2be8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bea:	8f 89       	ldd	r24, Y+23	; 0x17
    2bec:	98 8d       	ldd	r25, Y+24	; 0x18
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <STPM_vRotateCSteps+0x26e>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <STPM_vRotateCSteps+0x2ec>
	else if (__tmp > 65535)
    2c08:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <STPM_vRotateCSteps+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	69 8d       	ldd	r22, Y+25	; 0x19
    2c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9c 8b       	std	Y+20, r25	; 0x14
    2c46:	8b 8b       	std	Y+19, r24	; 0x13
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <STPM_vRotateCSteps+0x2ce>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9a 8b       	std	Y+18, r25	; 0x12
    2c50:	89 8b       	std	Y+17, r24	; 0x11
    2c52:	89 89       	ldd	r24, Y+17	; 0x11
    2c54:	9a 89       	ldd	r25, Y+18	; 0x12
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <STPM_vRotateCSteps+0x2bc>
    2c5a:	9a 8b       	std	Y+18, r25	; 0x12
    2c5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9c 8b       	std	Y+20, r25	; 0x14
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <STPM_vRotateCSteps+0x2b0>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <STPM_vRotateCSteps+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
    2c86:	8b 89       	ldd	r24, Y+19	; 0x13
    2c88:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8a:	98 8b       	std	Y+16, r25	; 0x10
    2c8c:	8f 87       	std	Y+15, r24	; 0x0f
    2c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c90:	98 89       	ldd	r25, Y+16	; 0x10
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <STPM_vRotateCSteps+0x2f8>
    2c96:	98 8b       	std	Y+16, r25	; 0x10
    2c98:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_DISABLE);
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
    2ca4:	84 e0       	ldi	r24, 0x04	; 4
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	41 e0       	ldi	r20, 0x01	; 1
    2caa:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a0 ea       	ldi	r26, 0xA0	; 160
    2cb4:	b1 e4       	ldi	r27, 0x41	; 65
    2cb6:	8b 87       	std	Y+11, r24	; 0x0b
    2cb8:	9c 87       	std	Y+12, r25	; 0x0c
    2cba:	ad 87       	std	Y+13, r26	; 0x0d
    2cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4a ef       	ldi	r20, 0xFA	; 250
    2ccc:	54 e4       	ldi	r21, 0x44	; 68
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8f 83       	std	Y+7, r24	; 0x07
    2cd8:	98 87       	std	Y+8, r25	; 0x08
    2cda:	a9 87       	std	Y+9, r26	; 0x09
    2cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	2c f4       	brge	.+10     	; 0x2d00 <STPM_vRotateCSteps+0x366>
		__ticks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	3f c0       	rjmp	.+126    	; 0x2d7e <STPM_vRotateCSteps+0x3e4>
	else if (__tmp > 65535)
    2d00:	6f 81       	ldd	r22, Y+7	; 0x07
    2d02:	78 85       	ldd	r23, Y+8	; 0x08
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	3f ef       	ldi	r19, 0xFF	; 255
    2d0c:	4f e7       	ldi	r20, 0x7F	; 127
    2d0e:	57 e4       	ldi	r21, 0x47	; 71
    2d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	4c f5       	brge	.+82     	; 0x2d6a <STPM_vRotateCSteps+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e2       	ldi	r20, 0x20	; 32
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <STPM_vRotateCSteps+0x3c6>
    2d42:	88 ec       	ldi	r24, 0xC8	; 200
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <STPM_vRotateCSteps+0x3b4>
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	69 f7       	brne	.-38     	; 0x2d42 <STPM_vRotateCSteps+0x3a8>
    2d68:	14 c0       	rjmp	.+40     	; 0x2d92 <STPM_vRotateCSteps+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	9a 83       	std	Y+2, r25	; 0x02
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <STPM_vRotateCSteps+0x3f0>
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
    2d92:	84 e0       	ldi	r24, 0x04	; 4
    2d94:	60 e0       	ldi	r22, 0x00	; 0
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	u16 L_u16I;

	/* Disable all coils */
	STPM_vStop();

	for(L_u16I = 0; L_u16I < A_u16Steps; L_u16I++) {
    2d9c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	9a af       	std	Y+58, r25	; 0x3a
    2da4:	89 af       	std	Y+57, r24	; 0x39
    2da6:	29 ad       	ldd	r18, Y+57	; 0x39
    2da8:	3a ad       	ldd	r19, Y+58	; 0x3a
    2daa:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dac:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dae:	28 17       	cp	r18, r24
    2db0:	39 07       	cpc	r19, r25
    2db2:	08 f4       	brcc	.+2      	; 0x2db6 <STPM_vRotateCSteps+0x41c>
    2db4:	03 ce       	rjmp	.-1018   	; 0x29bc <STPM_vRotateCSteps+0x22>
		/* for fourth Activation */
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_ENABLE);
		_delay_ms(STEPER_DELAY);
		MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
	}
}
    2db6:	ec 96       	adiw	r28, 0x3c	; 60
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <STPM_vStop>:

void STPM_vStop(void) {
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
	MDIO_Error_State_tSetPinValue(STPM_BLUE_PORT, STPM_BLUE_PIN, COIL_DISABLE);
    2dd0:	84 e0       	ldi	r24, 0x04	; 4
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(STPM_PINK_PORT, STPM_PINK_PIN, COIL_DISABLE);
    2dda:	84 e0       	ldi	r24, 0x04	; 4
    2ddc:	61 e0       	ldi	r22, 0x01	; 1
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(STPM_YELLOW_PORT, STPM_YELLOW_PIN, COIL_DISABLE);
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	66 e0       	ldi	r22, 0x06	; 6
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(STPM_ORANGE_PORT, STPM_ORANGE_PIN, COIL_DISABLE);
    2dee:	84 e0       	ldi	r24, 0x04	; 4
    2df0:	67 e0       	ldi	r22, 0x07	; 7
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
}
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <main>:
void Servo(u16 angle);
void seven_segment_display(u8 n);


int main ()
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	a3 97       	sbiw	r28, 0x23	; 35
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
	/* INTIAL  */
	PORT_voidInit(); // DIO INIT
    2e12:	0e 94 17 07 	call	0xe2e	; 0xe2e <PORT_voidInit>
	STPM_vInit();    // STEPPER INIT
    2e16:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <STPM_vInit>
	SPI_voidInitSlave(); // SPI_INIT
    2e1a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <SPI_voidInitSlave>

	/* INTIALIZE TIMER1 FOR SERVO MOTOR */
	MTIMER1_voidInit(FAST_PWM_NON_INVERTING,TOP_FPWM_ICR1,DIV_8);
    2e1e:	84 e0       	ldi	r24, 0x04	; 4
    2e20:	62 e0       	ldi	r22, 0x02	; 2
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 af 0b 	call	0x175e	; 0x175e <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000,TOP_FPWM_ICR1);
    2e28:	80 e2       	ldi	r24, 0x20	; 32
    2e2a:	9e e4       	ldi	r25, 0x4E	; 78
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <MTIMER1_voidSetTopValue>
	u8 SPI_data;

	while(1)
	{
		//SPI_data=SPI_u8Tranceive(80);
		SPI_data=SPI_u8Tranceive(80);
    2e32:	80 e5       	ldi	r24, 0x50	; 80
    2e34:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <SPI_u8Tranceive>
    2e38:	89 a3       	std	Y+33, r24	; 0x21
		//_delay_ms(50);
		if (SPI_data>=50)
    2e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3c:	82 33       	cpi	r24, 0x32	; 50
    2e3e:	08 f4       	brcc	.+2      	; 0x2e42 <main+0x44>
    2e40:	7a c0       	rjmp	.+244    	; 0x2f36 <main+0x138>
		{


			MDIO_EnumSetPortValue(DIO_PORTA,~SPI_data);
    2e42:	89 a1       	ldd	r24, Y+33	; 0x21
    2e44:	98 2f       	mov	r25, r24
    2e46:	90 95       	com	r25
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	69 2f       	mov	r22, r25
    2e4c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_EnumSetPortValue>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 ee       	ldi	r26, 0xE0	; 224
    2e56:	b0 e4       	ldi	r27, 0x40	; 64
    2e58:	89 8f       	std	Y+25, r24	; 0x19
    2e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	69 8d       	ldd	r22, Y+25	; 0x19
    2e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a ef       	ldi	r20, 0xFA	; 250
    2e6e:	54 e4       	ldi	r21, 0x44	; 68
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8d 8b       	std	Y+21, r24	; 0x15
    2e7a:	9e 8b       	std	Y+22, r25	; 0x16
    2e7c:	af 8b       	std	Y+23, r26	; 0x17
    2e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <main+0xa4>
		__ticks = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	3f c0       	rjmp	.+126    	; 0x2f20 <main+0x122>
	else if (__tmp > 65535)
    2ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	4c f5       	brge	.+82     	; 0x2f0c <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9c 8b       	std	Y+20, r25	; 0x14
    2ee0:	8b 8b       	std	Y+19, r24	; 0x13
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <main+0x104>
    2ee4:	88 ec       	ldi	r24, 0xC8	; 200
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9a 8b       	std	Y+18, r25	; 0x12
    2eea:	89 8b       	std	Y+17, r24	; 0x11
    2eec:	89 89       	ldd	r24, Y+17	; 0x11
    2eee:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <main+0xf2>
    2ef4:	9a 8b       	std	Y+18, r25	; 0x12
    2ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	69 f7       	brne	.-38     	; 0x2ee4 <main+0xe6>
    2f0a:	d8 c0       	rjmp	.+432    	; 0x30bc <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9c 8b       	std	Y+20, r25	; 0x14
    2f1e:	8b 8b       	std	Y+19, r24	; 0x13
    2f20:	8b 89       	ldd	r24, Y+19	; 0x13
    2f22:	9c 89       	ldd	r25, Y+20	; 0x14
    2f24:	98 8b       	std	Y+16, r25	; 0x10
    2f26:	8f 87       	std	Y+15, r24	; 0x0f
    2f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2a:	98 89       	ldd	r25, Y+16	; 0x10
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <main+0x12e>
    2f30:	98 8b       	std	Y+16, r25	; 0x10
    2f32:	8f 87       	std	Y+15, r24	; 0x0f
    2f34:	c3 c0       	rjmp	.+390    	; 0x30bc <main+0x2be>
			_delay_ms(7);

		}
		else if(SPI_data<50)
    2f36:	89 a1       	ldd	r24, Y+33	; 0x21
    2f38:	82 33       	cpi	r24, 0x32	; 50
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <main+0x140>
    2f3c:	bf c0       	rjmp	.+382    	; 0x30bc <main+0x2be>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	a0 ea       	ldi	r26, 0xA0	; 160
    2f44:	b0 e4       	ldi	r27, 0x40	; 64
    2f46:	8b 87       	std	Y+11, r24	; 0x0b
    2f48:	9c 87       	std	Y+12, r25	; 0x0c
    2f4a:	ad 87       	std	Y+13, r26	; 0x0d
    2f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a ef       	ldi	r20, 0xFA	; 250
    2f5c:	54 e4       	ldi	r21, 0x44	; 68
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	8f 83       	std	Y+7, r24	; 0x07
    2f68:	98 87       	std	Y+8, r25	; 0x08
    2f6a:	a9 87       	std	Y+9, r26	; 0x09
    2f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f70:	78 85       	ldd	r23, Y+8	; 0x08
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	2c f4       	brge	.+10     	; 0x2f90 <main+0x192>
		__ticks = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	3f c0       	rjmp	.+126    	; 0x300e <main+0x210>
	else if (__tmp > 65535)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	3f ef       	ldi	r19, 0xFF	; 255
    2f9c:	4f e7       	ldi	r20, 0x7F	; 127
    2f9e:	57 e4       	ldi	r21, 0x47	; 71
    2fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa4:	18 16       	cp	r1, r24
    2fa6:	4c f5       	brge	.+82     	; 0x2ffa <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	bc 01       	movw	r22, r24
    2fc2:	cd 01       	movw	r24, r26
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	0f c0       	rjmp	.+30     	; 0x2ff0 <main+0x1f2>
    2fd2:	88 ec       	ldi	r24, 0xC8	; 200
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9c 83       	std	Y+4, r25	; 0x04
    2fd8:	8b 83       	std	Y+3, r24	; 0x03
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	f1 f7       	brne	.-4      	; 0x2fde <main+0x1e0>
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9e 83       	std	Y+6, r25	; 0x06
    2fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	69 f7       	brne	.-38     	; 0x2fd2 <main+0x1d4>
    2ff8:	14 c0       	rjmp	.+40     	; 0x3022 <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffc:	78 85       	ldd	r23, Y+8	; 0x08
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	9a 85       	ldd	r25, Y+10	; 0x0a
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <main+0x21c>
    301e:	9a 83       	std	Y+2, r25	; 0x02
    3020:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(5);

			static u8 f=0;
			MDIO_Error_State_tSetPinValue(DIO_PORTD,PIN2,DIO_HIGH);
    3022:	84 e0       	ldi	r24, 0x04	; 4
    3024:	62 e0       	ldi	r22, 0x02	; 2
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
			int D1=SPI_data%10 ;
    302c:	89 a1       	ldd	r24, Y+33	; 0x21
    302e:	9a e0       	ldi	r25, 0x0A	; 10
    3030:	69 2f       	mov	r22, r25
    3032:	0e 94 1a 19 	call	0x3234	; 0x3234 <__udivmodqi4>
    3036:	89 2f       	mov	r24, r25
    3038:	88 2f       	mov	r24, r24
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	98 a3       	std	Y+32, r25	; 0x20
    303e:	8f 8f       	std	Y+31, r24	; 0x1f
			int D2=SPI_data/10 ;
    3040:	89 a1       	ldd	r24, Y+33	; 0x21
    3042:	9a e0       	ldi	r25, 0x0A	; 10
    3044:	69 2f       	mov	r22, r25
    3046:	0e 94 1a 19 	call	0x3234	; 0x3234 <__udivmodqi4>
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e 8f       	std	Y+30, r25	; 0x1e
    3050:	8d 8f       	std	Y+29, r24	; 0x1d
			if (f==0)
    3052:	80 91 76 01 	lds	r24, 0x0176
    3056:	88 23       	and	r24, r24
    3058:	89 f4       	brne	.+34     	; 0x307c <main+0x27e>
			{
				MDIO_Error_State_tSetPinValue(DIO_PORTD,PIN2,DIO_HIGH);
    305a:	84 e0       	ldi	r24, 0x04	; 4
    305c:	62 e0       	ldi	r22, 0x02	; 2
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
				MDIO_Error_State_tSetPinValue(DIO_PORTD,PIN3,DIO_LOW);
    3064:	84 e0       	ldi	r24, 0x04	; 4
    3066:	63 e0       	ldi	r22, 0x03	; 3
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
				seven_segment_display(D1);
    306e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3070:	0e 94 cc 18 	call	0x3198	; 0x3198 <seven_segment_display>
				f=1 ;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	80 93 76 01 	sts	0x0176, r24
    307a:	0f c0       	rjmp	.+30     	; 0x309a <main+0x29c>
			}
			else
			{
				MDIO_Error_State_tSetPinValue(DIO_PORTD,PIN2,DIO_LOW);
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
				MDIO_Error_State_tSetPinValue(DIO_PORTD,PIN3,DIO_HIGH);
    3086:	84 e0       	ldi	r24, 0x04	; 4
    3088:	63 e0       	ldi	r22, 0x03	; 3
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
				seven_segment_display(D2);
    3090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3092:	0e 94 cc 18 	call	0x3198	; 0x3198 <seven_segment_display>
				f=0 ;
    3096:	10 92 76 01 	sts	0x0176, r1
			}

			//	MDIO_u8SetPortValue(DIO_PORTA,DIO_LOW);
			if ((SPI_data>35)&&(SPI_data<40))
    309a:	89 a1       	ldd	r24, Y+33	; 0x21
    309c:	84 32       	cpi	r24, 0x24	; 36
    309e:	48 f0       	brcs	.+18     	; 0x30b2 <main+0x2b4>
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	88 32       	cpi	r24, 0x28	; 40
    30a4:	30 f4       	brcc	.+12     	; 0x30b2 <main+0x2b4>
			{
				MDIO_Error_State_tSetPinValue(DIO_PORTB,PIN0,DIO_HIGH);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	41 e0       	ldi	r20, 0x01	; 1
    30ac:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    30b0:	05 c0       	rjmp	.+10     	; 0x30bc <main+0x2be>

			}
			else
			{
				MDIO_Error_State_tSetPinValue(DIO_PORTB,PIN0,DIO_LOW);
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>

			}

		}

		switch(SPI_data)
    30bc:	89 a1       	ldd	r24, Y+33	; 0x21
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	3b a3       	std	Y+35, r19	; 0x23
    30c4:	2a a3       	std	Y+34, r18	; 0x22
    30c6:	8a a1       	ldd	r24, Y+34	; 0x22
    30c8:	9b a1       	ldd	r25, Y+35	; 0x23
    30ca:	84 33       	cpi	r24, 0x34	; 52
    30cc:	91 05       	cpc	r25, r1
    30ce:	d1 f1       	breq	.+116    	; 0x3144 <main+0x346>
    30d0:	2a a1       	ldd	r18, Y+34	; 0x22
    30d2:	3b a1       	ldd	r19, Y+35	; 0x23
    30d4:	25 33       	cpi	r18, 0x35	; 53
    30d6:	31 05       	cpc	r19, r1
    30d8:	84 f4       	brge	.+32     	; 0x30fa <main+0x2fc>
    30da:	8a a1       	ldd	r24, Y+34	; 0x22
    30dc:	9b a1       	ldd	r25, Y+35	; 0x23
    30de:	82 33       	cpi	r24, 0x32	; 50
    30e0:	91 05       	cpc	r25, r1
    30e2:	29 f1       	breq	.+74     	; 0x312e <main+0x330>
    30e4:	2a a1       	ldd	r18, Y+34	; 0x22
    30e6:	3b a1       	ldd	r19, Y+35	; 0x23
    30e8:	23 33       	cpi	r18, 0x33	; 51
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f5       	brge	.+74     	; 0x3138 <main+0x33a>
    30ee:	8a a1       	ldd	r24, Y+34	; 0x22
    30f0:	9b a1       	ldd	r25, Y+35	; 0x23
    30f2:	81 33       	cpi	r24, 0x31	; 49
    30f4:	91 05       	cpc	r25, r1
    30f6:	b1 f0       	breq	.+44     	; 0x3124 <main+0x326>
    30f8:	9c ce       	rjmp	.-712    	; 0x2e32 <main+0x34>
    30fa:	2a a1       	ldd	r18, Y+34	; 0x22
    30fc:	3b a1       	ldd	r19, Y+35	; 0x23
    30fe:	26 33       	cpi	r18, 0x36	; 54
    3100:	31 05       	cpc	r19, r1
    3102:	59 f1       	breq	.+86     	; 0x315a <main+0x35c>
    3104:	8a a1       	ldd	r24, Y+34	; 0x22
    3106:	9b a1       	ldd	r25, Y+35	; 0x23
    3108:	86 33       	cpi	r24, 0x36	; 54
    310a:	91 05       	cpc	r25, r1
    310c:	0c f1       	brlt	.+66     	; 0x3150 <main+0x352>
    310e:	2a a1       	ldd	r18, Y+34	; 0x22
    3110:	3b a1       	ldd	r19, Y+35	; 0x23
    3112:	27 33       	cpi	r18, 0x37	; 55
    3114:	31 05       	cpc	r19, r1
    3116:	31 f1       	breq	.+76     	; 0x3164 <main+0x366>
    3118:	8a a1       	ldd	r24, Y+34	; 0x22
    311a:	9b a1       	ldd	r25, Y+35	; 0x23
    311c:	88 33       	cpi	r24, 0x38	; 56
    311e:	91 05       	cpc	r25, r1
    3120:	31 f1       	breq	.+76     	; 0x316e <main+0x370>
    3122:	87 ce       	rjmp	.-754    	; 0x2e32 <main+0x34>
		{
		case '1': Servo(ANGLE_180);break;                            //the door will open
    3124:	84 ec       	ldi	r24, 0xC4	; 196
    3126:	99 e0       	ldi	r25, 0x09	; 9
    3128:	0e 94 bc 18 	call	0x3178	; 0x3178 <Servo>
    312c:	82 ce       	rjmp	.-764    	; 0x2e32 <main+0x34>
		case '2' : Servo(ANGLE_0);break;                             //the door will close
    312e:	82 ec       	ldi	r24, 0xC2	; 194
    3130:	91 e0       	ldi	r25, 0x01	; 1
    3132:	0e 94 bc 18 	call	0x3178	; 0x3178 <Servo>
    3136:	7d ce       	rjmp	.-774    	; 0x2e32 <main+0x34>
		case '3':MDIO_Error_State_tSetPinValue(DIO_PORTB,PIN0,DIO_HIGH);break;//the door will open
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    3142:	77 ce       	rjmp	.-786    	; 0x2e32 <main+0x34>
		case '4':MDIO_Error_State_tSetPinValue(DIO_PORTB,PIN0,DIO_LOW);break;//the door will close
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	0e 94 3c 08 	call	0x1078	; 0x1078 <MDIO_Error_State_tSetPinValue>
    314e:	71 ce       	rjmp	.-798    	; 0x2e32 <main+0x34>
		case '5':STPM_vRCW(270);break;                                 //the  garage door will open
    3150:	8e e0       	ldi	r24, 0x0E	; 14
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <STPM_vRCW>
    3158:	6c ce       	rjmp	.-808    	; 0x2e32 <main+0x34>
		case '6':STPM_vRCCW(270);break;                               //the garage door will close
    315a:	8e e0       	ldi	r24, 0x0E	; 14
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <STPM_vRCCW>
    3162:	67 ce       	rjmp	.-818    	; 0x2e32 <main+0x34>
		case '7':MDIO_EnumSetPortValue(DIO_PORTA,DIO_HIGH);break;       //LIGHT ON
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_EnumSetPortValue>
    316c:	62 ce       	rjmp	.-828    	; 0x2e32 <main+0x34>
		case '8':MDIO_EnumSetPortValue(DIO_PORTA,DIO_LOW);break;         //LIGHT OFF
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_EnumSetPortValue>
    3176:	5d ce       	rjmp	.-838    	; 0x2e32 <main+0x34>

00003178 <Servo>:

}


void Servo(u16 angle)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	00 d0       	rcall	.+0      	; 0x317e <Servo+0x6>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_voidSetDutyCycle(angle);
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MTIMER1_voidSetDutyCycle>
}
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <seven_segment_display>:
void seven_segment_display(u8 n)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	60 97       	sbiw	r28, 0x10	; 16
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	8b 87       	std	Y+11, r24	; 0x0b
	u8 segment_num[10]={0XC0,0XF9,0XA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90};
    31ae:	ce 01       	movw	r24, r28
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	9d 87       	std	Y+13, r25	; 0x0d
    31b4:	8c 87       	std	Y+12, r24	; 0x0c
    31b6:	e8 e6       	ldi	r30, 0x68	; 104
    31b8:	f1 e0       	ldi	r31, 0x01	; 1
    31ba:	ff 87       	std	Y+15, r31	; 0x0f
    31bc:	ee 87       	std	Y+14, r30	; 0x0e
    31be:	fa e0       	ldi	r31, 0x0A	; 10
    31c0:	f8 8b       	std	Y+16, r31	; 0x10
    31c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    31c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    31c6:	00 80       	ld	r0, Z
    31c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	9f 87       	std	Y+15, r25	; 0x0f
    31d0:	8e 87       	std	Y+14, r24	; 0x0e
    31d2:	ec 85       	ldd	r30, Y+12	; 0x0c
    31d4:	fd 85       	ldd	r31, Y+13	; 0x0d
    31d6:	00 82       	st	Z, r0
    31d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31da:	9d 85       	ldd	r25, Y+13	; 0x0d
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	9d 87       	std	Y+13, r25	; 0x0d
    31e0:	8c 87       	std	Y+12, r24	; 0x0c
    31e2:	98 89       	ldd	r25, Y+16	; 0x10
    31e4:	91 50       	subi	r25, 0x01	; 1
    31e6:	98 8b       	std	Y+16, r25	; 0x10
    31e8:	e8 89       	ldd	r30, Y+16	; 0x10
    31ea:	ee 23       	and	r30, r30
    31ec:	51 f7       	brne	.-44     	; 0x31c2 <seven_segment_display+0x2a>

	MDIO_EnumSetPortValue(DIO_PORTC,segment_num[n]);
    31ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	fc 01       	movw	r30, r24
    31fa:	e2 0f       	add	r30, r18
    31fc:	f3 1f       	adc	r31, r19
    31fe:	90 81       	ld	r25, Z
    3200:	83 e0       	ldi	r24, 0x03	; 3
    3202:	69 2f       	mov	r22, r25
    3204:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_EnumSetPortValue>
	MDIO_EnumSetPortValue(DIO_PORTC,segment_num[n]);
    3208:	8b 85       	ldd	r24, Y+11	; 0x0b
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	ce 01       	movw	r24, r28
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	fc 01       	movw	r30, r24
    3214:	e2 0f       	add	r30, r18
    3216:	f3 1f       	adc	r31, r19
    3218:	90 81       	ld	r25, Z
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	69 2f       	mov	r22, r25
    321e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_EnumSetPortValue>
}
    3222:	60 96       	adiw	r28, 0x10	; 16
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <__udivmodqi4>:
    3234:	99 1b       	sub	r25, r25
    3236:	79 e0       	ldi	r23, 0x09	; 9
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <__udivmodqi4_ep>

0000323a <__udivmodqi4_loop>:
    323a:	99 1f       	adc	r25, r25
    323c:	96 17       	cp	r25, r22
    323e:	08 f0       	brcs	.+2      	; 0x3242 <__udivmodqi4_ep>
    3240:	96 1b       	sub	r25, r22

00003242 <__udivmodqi4_ep>:
    3242:	88 1f       	adc	r24, r24
    3244:	7a 95       	dec	r23
    3246:	c9 f7       	brne	.-14     	; 0x323a <__udivmodqi4_loop>
    3248:	80 95       	com	r24
    324a:	08 95       	ret

0000324c <__prologue_saves__>:
    324c:	2f 92       	push	r2
    324e:	3f 92       	push	r3
    3250:	4f 92       	push	r4
    3252:	5f 92       	push	r5
    3254:	6f 92       	push	r6
    3256:	7f 92       	push	r7
    3258:	8f 92       	push	r8
    325a:	9f 92       	push	r9
    325c:	af 92       	push	r10
    325e:	bf 92       	push	r11
    3260:	cf 92       	push	r12
    3262:	df 92       	push	r13
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	ca 1b       	sub	r28, r26
    3276:	db 0b       	sbc	r29, r27
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	09 94       	ijmp

00003284 <__epilogue_restores__>:
    3284:	2a 88       	ldd	r2, Y+18	; 0x12
    3286:	39 88       	ldd	r3, Y+17	; 0x11
    3288:	48 88       	ldd	r4, Y+16	; 0x10
    328a:	5f 84       	ldd	r5, Y+15	; 0x0f
    328c:	6e 84       	ldd	r6, Y+14	; 0x0e
    328e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3290:	8c 84       	ldd	r8, Y+12	; 0x0c
    3292:	9b 84       	ldd	r9, Y+11	; 0x0b
    3294:	aa 84       	ldd	r10, Y+10	; 0x0a
    3296:	b9 84       	ldd	r11, Y+9	; 0x09
    3298:	c8 84       	ldd	r12, Y+8	; 0x08
    329a:	df 80       	ldd	r13, Y+7	; 0x07
    329c:	ee 80       	ldd	r14, Y+6	; 0x06
    329e:	fd 80       	ldd	r15, Y+5	; 0x05
    32a0:	0c 81       	ldd	r16, Y+4	; 0x04
    32a2:	1b 81       	ldd	r17, Y+3	; 0x03
    32a4:	aa 81       	ldd	r26, Y+2	; 0x02
    32a6:	b9 81       	ldd	r27, Y+1	; 0x01
    32a8:	ce 0f       	add	r28, r30
    32aa:	d1 1d       	adc	r29, r1
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	ed 01       	movw	r28, r26
    32b8:	08 95       	ret

000032ba <_exit>:
    32ba:	f8 94       	cli

000032bc <__stop_program>:
    32bc:	ff cf       	rjmp	.-2      	; 0x32bc <__stop_program>
