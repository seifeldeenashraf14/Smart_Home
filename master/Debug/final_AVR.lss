
final_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bcc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002bcc  00002c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028c8  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001019  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006539  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006679  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000067e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000931d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <main>
      7a:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_void_Init>:
//u8 Local_u8StringCounter=0;

#if CLCD_MODE==4

void CLCD_void_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6c 97       	sbiw	r28, 0x1c	; 28
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e2       	ldi	r26, 0x20	; 32
     b50:	b2 e4       	ldi	r27, 0x42	; 66
     b52:	89 8f       	std	Y+25, r24	; 0x19
     b54:	9a 8f       	std	Y+26, r25	; 0x1a
     b56:	ab 8f       	std	Y+27, r26	; 0x1b
     b58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b5a:	69 8d       	ldd	r22, Y+25	; 0x19
     b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	4a ef       	ldi	r20, 0xFA	; 250
     b68:	54 e4       	ldi	r21, 0x44	; 68
     b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	8d 8b       	std	Y+21, r24	; 0x15
     b74:	9e 8b       	std	Y+22, r25	; 0x16
     b76:	af 8b       	std	Y+23, r26	; 0x17
     b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b7a:	6d 89       	ldd	r22, Y+21	; 0x15
     b7c:	7e 89       	ldd	r23, Y+22	; 0x16
     b7e:	8f 89       	ldd	r24, Y+23	; 0x17
     b80:	98 8d       	ldd	r25, Y+24	; 0x18
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b8e:	88 23       	and	r24, r24
     b90:	2c f4       	brge	.+10     	; 0xb9c <CLCD_void_Init+0x66>
		__ticks = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9c 8b       	std	Y+20, r25	; 0x14
     b98:	8b 8b       	std	Y+19, r24	; 0x13
     b9a:	3f c0       	rjmp	.+126    	; 0xc1a <CLCD_void_Init+0xe4>
	else if (__tmp > 65535)
     b9c:	6d 89       	ldd	r22, Y+21	; 0x15
     b9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ba0:	8f 89       	ldd	r24, Y+23	; 0x17
     ba2:	98 8d       	ldd	r25, Y+24	; 0x18
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	4c f5       	brge	.+82     	; 0xc06 <CLCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb4:	69 8d       	ldd	r22, Y+25	; 0x19
     bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	9c 8b       	std	Y+20, r25	; 0x14
     bda:	8b 8b       	std	Y+19, r24	; 0x13
     bdc:	0f c0       	rjmp	.+30     	; 0xbfc <CLCD_void_Init+0xc6>
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9a 8b       	std	Y+18, r25	; 0x12
     be4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     be6:	89 89       	ldd	r24, Y+17	; 0x11
     be8:	9a 89       	ldd	r25, Y+18	; 0x12
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <CLCD_void_Init+0xb4>
     bee:	9a 8b       	std	Y+18, r25	; 0x12
     bf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf2:	8b 89       	ldd	r24, Y+19	; 0x13
     bf4:	9c 89       	ldd	r25, Y+20	; 0x14
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	9c 8b       	std	Y+20, r25	; 0x14
     bfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfc:	8b 89       	ldd	r24, Y+19	; 0x13
     bfe:	9c 89       	ldd	r25, Y+20	; 0x14
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	69 f7       	brne	.-38     	; 0xbde <CLCD_void_Init+0xa8>
     c04:	14 c0       	rjmp	.+40     	; 0xc2e <CLCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c06:	6d 89       	ldd	r22, Y+21	; 0x15
     c08:	7e 89       	ldd	r23, Y+22	; 0x16
     c0a:	8f 89       	ldd	r24, Y+23	; 0x17
     c0c:	98 8d       	ldd	r25, Y+24	; 0x18
     c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	9c 8b       	std	Y+20, r25	; 0x14
     c18:	8b 8b       	std	Y+19, r24	; 0x13
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	9c 89       	ldd	r25, Y+20	; 0x14
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <CLCD_void_Init+0xf0>
     c2a:	98 8b       	std	Y+16, r25	; 0x10
     c2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	CLCD_voidSendCommand(0b00100010);
     c2e:	82 e2       	ldi	r24, 0x22	; 34
     c30:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
	MDIO_EnumSetPortValue(CLCD_DATA_PORT,0b10000000);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	60 e8       	ldi	r22, 0x80	; 128
     c38:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_HIGH);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e4       	ldi	r27, 0x40	; 64
     c4e:	8b 87       	std	Y+11, r24	; 0x0b
     c50:	9c 87       	std	Y+12, r25	; 0x0c
     c52:	ad 87       	std	Y+13, r26	; 0x0d
     c54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c56:	6b 85       	ldd	r22, Y+11	; 0x0b
     c58:	7c 85       	ldd	r23, Y+12	; 0x0c
     c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	4a ef       	ldi	r20, 0xFA	; 250
     c64:	54 e4       	ldi	r21, 0x44	; 68
     c66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	8f 83       	std	Y+7, r24	; 0x07
     c70:	98 87       	std	Y+8, r25	; 0x08
     c72:	a9 87       	std	Y+9, r26	; 0x09
     c74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c76:	6f 81       	ldd	r22, Y+7	; 0x07
     c78:	78 85       	ldd	r23, Y+8	; 0x08
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e8       	ldi	r20, 0x80	; 128
     c84:	5f e3       	ldi	r21, 0x3F	; 63
     c86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c8a:	88 23       	and	r24, r24
     c8c:	2c f4       	brge	.+10     	; 0xc98 <CLCD_void_Init+0x162>
		__ticks = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	8d 83       	std	Y+5, r24	; 0x05
     c96:	3f c0       	rjmp	.+126    	; 0xd16 <CLCD_void_Init+0x1e0>
	else if (__tmp > 65535)
     c98:	6f 81       	ldd	r22, Y+7	; 0x07
     c9a:	78 85       	ldd	r23, Y+8	; 0x08
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	3f ef       	ldi	r19, 0xFF	; 255
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	57 e4       	ldi	r21, 0x47	; 71
     ca8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cac:	18 16       	cp	r1, r24
     cae:	4c f5       	brge	.+82     	; 0xd02 <CLCD_void_Init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e2       	ldi	r20, 0x20	; 32
     cbe:	51 e4       	ldi	r21, 0x41	; 65
     cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	0f c0       	rjmp	.+30     	; 0xcf8 <CLCD_void_Init+0x1c2>
     cda:	88 ec       	ldi	r24, 0xC8	; 200
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <CLCD_void_Init+0x1b0>
     cea:	9c 83       	std	Y+4, r25	; 0x04
     cec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	9e 83       	std	Y+6, r25	; 0x06
     cf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	69 f7       	brne	.-38     	; 0xcda <CLCD_void_Init+0x1a4>
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <CLCD_void_Init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <CLCD_void_Init+0x1ec>
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_LOW);
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	62 e0       	ldi	r22, 0x02	; 2
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	CLCD_voidSendCommand(0b00001100);
     d34:	8c e0       	ldi	r24, 0x0C	; 12
     d36:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
}
     d40:	6c 96       	adiw	r28, 0x1c	; 28
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	6d 97       	sbiw	r28, 0x1d	; 29
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_LOW);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_EnumSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d80:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_HIGH);
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	62 e0       	ldi	r22, 0x02	; 2
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e4       	ldi	r27, 0x40	; 64
     d96:	89 8f       	std	Y+25, r24	; 0x19
     d98:	9a 8f       	std	Y+26, r25	; 0x1a
     d9a:	ab 8f       	std	Y+27, r26	; 0x1b
     d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9e:	69 8d       	ldd	r22, Y+25	; 0x19
     da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	4a ef       	ldi	r20, 0xFA	; 250
     dac:	54 e4       	ldi	r21, 0x44	; 68
     dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	8d 8b       	std	Y+21, r24	; 0x15
     db8:	9e 8b       	std	Y+22, r25	; 0x16
     dba:	af 8b       	std	Y+23, r26	; 0x17
     dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dbe:	6d 89       	ldd	r22, Y+21	; 0x15
     dc0:	7e 89       	ldd	r23, Y+22	; 0x16
     dc2:	8f 89       	ldd	r24, Y+23	; 0x17
     dc4:	98 8d       	ldd	r25, Y+24	; 0x18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	5f e3       	ldi	r21, 0x3F	; 63
     dce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dd2:	88 23       	and	r24, r24
     dd4:	2c f4       	brge	.+10     	; 0xde0 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	3f c0       	rjmp	.+126    	; 0xe5e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     de0:	6d 89       	ldd	r22, Y+21	; 0x15
     de2:	7e 89       	ldd	r23, Y+22	; 0x16
     de4:	8f 89       	ldd	r24, Y+23	; 0x17
     de6:	98 8d       	ldd	r25, Y+24	; 0x18
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	3f ef       	ldi	r19, 0xFF	; 255
     dec:	4f e7       	ldi	r20, 0x7F	; 127
     dee:	57 e4       	ldi	r21, 0x47	; 71
     df0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     df4:	18 16       	cp	r1, r24
     df6:	4c f5       	brge	.+82     	; 0xe4a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df8:	69 8d       	ldd	r22, Y+25	; 0x19
     dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e2       	ldi	r20, 0x20	; 32
     e06:	51 e4       	ldi	r21, 0x41	; 65
     e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9c 8b       	std	Y+20, r25	; 0x14
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <CLCD_voidSendCommand+0xee>
     e22:	88 ec       	ldi	r24, 0xC8	; 200
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9a 8b       	std	Y+18, r25	; 0x12
     e28:	89 8b       	std	Y+17, r24	; 0x11
     e2a:	89 89       	ldd	r24, Y+17	; 0x11
     e2c:	9a 89       	ldd	r25, Y+18	; 0x12
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <CLCD_voidSendCommand+0xdc>
     e32:	9a 8b       	std	Y+18, r25	; 0x12
     e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e36:	8b 89       	ldd	r24, Y+19	; 0x13
     e38:	9c 89       	ldd	r25, Y+20	; 0x14
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9c 8b       	std	Y+20, r25	; 0x14
     e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e40:	8b 89       	ldd	r24, Y+19	; 0x13
     e42:	9c 89       	ldd	r25, Y+20	; 0x14
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	69 f7       	brne	.-38     	; 0xe22 <CLCD_voidSendCommand+0xd0>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4a:	6d 89       	ldd	r22, Y+21	; 0x15
     e4c:	7e 89       	ldd	r23, Y+22	; 0x16
     e4e:	8f 89       	ldd	r24, Y+23	; 0x17
     e50:	98 8d       	ldd	r25, Y+24	; 0x18
     e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9c 8b       	std	Y+20, r25	; 0x14
     e5c:	8b 8b       	std	Y+19, r24	; 0x13
     e5e:	8b 89       	ldd	r24, Y+19	; 0x13
     e60:	9c 89       	ldd	r25, Y+20	; 0x14
     e62:	98 8b       	std	Y+16, r25	; 0x10
     e64:	8f 87       	std	Y+15, r24	; 0x0f
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	98 89       	ldd	r25, Y+16	; 0x10
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <CLCD_voidSendCommand+0x118>
     e6e:	98 8b       	std	Y+16, r25	; 0x10
     e70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_LOW);
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_EnumSetPortValue(CLCD_DATA_PORT,(Copy_u8Command<<4));
     e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7e:	98 2f       	mov	r25, r24
     e80:	92 95       	swap	r25
     e82:	90 7f       	andi	r25, 0xF0	; 240
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	69 2f       	mov	r22, r25
     e88:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_HIGH);
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	62 e0       	ldi	r22, 0x02	; 2
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e4       	ldi	r27, 0x40	; 64
     e9e:	8b 87       	std	Y+11, r24	; 0x0b
     ea0:	9c 87       	std	Y+12, r25	; 0x0c
     ea2:	ad 87       	std	Y+13, r26	; 0x0d
     ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4a ef       	ldi	r20, 0xFA	; 250
     eb4:	54 e4       	ldi	r21, 0x44	; 68
     eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	8f 83       	std	Y+7, r24	; 0x07
     ec0:	98 87       	std	Y+8, r25	; 0x08
     ec2:	a9 87       	std	Y+9, r26	; 0x09
     ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e8       	ldi	r20, 0x80	; 128
     ed4:	5f e3       	ldi	r21, 0x3F	; 63
     ed6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <CLCD_voidSendCommand+0x196>
		__ticks = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
     ee6:	3f c0       	rjmp	.+126    	; 0xf66 <CLCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	3f ef       	ldi	r19, 0xFF	; 255
     ef4:	4f e7       	ldi	r20, 0x7F	; 127
     ef6:	57 e4       	ldi	r21, 0x47	; 71
     ef8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     efc:	18 16       	cp	r1, r24
     efe:	4c f5       	brge	.+82     	; 0xf52 <CLCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	6b 85       	ldd	r22, Y+11	; 0x0b
     f02:	7c 85       	ldd	r23, Y+12	; 0x0c
     f04:	8d 85       	ldd	r24, Y+13	; 0x0d
     f06:	9e 85       	ldd	r25, Y+14	; 0x0e
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <CLCD_voidSendCommand+0x1f6>
     f2a:	88 ec       	ldi	r24, 0xC8	; 200
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9c 83       	std	Y+4, r25	; 0x04
     f30:	8b 83       	std	Y+3, r24	; 0x03
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <CLCD_voidSendCommand+0x1e4>
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f7       	brne	.-38     	; 0xf2a <CLCD_voidSendCommand+0x1d8>
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <CLCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f52:	6f 81       	ldd	r22, Y+7	; 0x07
     f54:	78 85       	ldd	r23, Y+8	; 0x08
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <CLCD_voidSendCommand+0x220>
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_LOW);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
}
     f84:	6d 96       	adiw	r28, 0x1d	; 29
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	6d 97       	sbiw	r28, 0x1d	; 29
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	8d 8f       	std	Y+29, r24	; 0x1d
	/*if(Local_u8StringCounter==0x10)
	{
		CLCD_voidGoToXY(1,0);
	}*/
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_HIGH);
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_EnumSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fc4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_HIGH);
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e4       	ldi	r27, 0x40	; 64
     fda:	89 8f       	std	Y+25, r24	; 0x19
     fdc:	9a 8f       	std	Y+26, r25	; 0x1a
     fde:	ab 8f       	std	Y+27, r26	; 0x1b
     fe0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe2:	69 8d       	ldd	r22, Y+25	; 0x19
     fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a ef       	ldi	r20, 0xFA	; 250
     ff0:	54 e4       	ldi	r21, 0x44	; 68
     ff2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8d 8b       	std	Y+21, r24	; 0x15
     ffc:	9e 8b       	std	Y+22, r25	; 0x16
     ffe:	af 8b       	std	Y+23, r26	; 0x17
    1000:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1002:	6d 89       	ldd	r22, Y+21	; 0x15
    1004:	7e 89       	ldd	r23, Y+22	; 0x16
    1006:	8f 89       	ldd	r24, Y+23	; 0x17
    1008:	98 8d       	ldd	r25, Y+24	; 0x18
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9c 8b       	std	Y+20, r25	; 0x14
    1020:	8b 8b       	std	Y+19, r24	; 0x13
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1038:	18 16       	cp	r1, r24
    103a:	4c f5       	brge	.+82     	; 0x108e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103c:	69 8d       	ldd	r22, Y+25	; 0x19
    103e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9c 8b       	std	Y+20, r25	; 0x14
    1062:	8b 8b       	std	Y+19, r24	; 0x13
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <CLCD_voidSendData+0xee>
    1066:	88 ec       	ldi	r24, 0xC8	; 200
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9a 8b       	std	Y+18, r25	; 0x12
    106c:	89 8b       	std	Y+17, r24	; 0x11
    106e:	89 89       	ldd	r24, Y+17	; 0x11
    1070:	9a 89       	ldd	r25, Y+18	; 0x12
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <CLCD_voidSendData+0xdc>
    1076:	9a 8b       	std	Y+18, r25	; 0x12
    1078:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	8b 89       	ldd	r24, Y+19	; 0x13
    107c:	9c 89       	ldd	r25, Y+20	; 0x14
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	8b 89       	ldd	r24, Y+19	; 0x13
    1086:	9c 89       	ldd	r25, Y+20	; 0x14
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	69 f7       	brne	.-38     	; 0x1066 <CLCD_voidSendData+0xd0>
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	6d 89       	ldd	r22, Y+21	; 0x15
    1090:	7e 89       	ldd	r23, Y+22	; 0x16
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	9c 8b       	std	Y+20, r25	; 0x14
    10a0:	8b 8b       	std	Y+19, r24	; 0x13
    10a2:	8b 89       	ldd	r24, Y+19	; 0x13
    10a4:	9c 89       	ldd	r25, Y+20	; 0x14
    10a6:	98 8b       	std	Y+16, r25	; 0x10
    10a8:	8f 87       	std	Y+15, r24	; 0x0f
    10aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ac:	98 89       	ldd	r25, Y+16	; 0x10
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <CLCD_voidSendData+0x118>
    10b2:	98 8b       	std	Y+16, r25	; 0x10
    10b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_LOW);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	62 e0       	ldi	r22, 0x02	; 2
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_EnumSetPortValue(CLCD_DATA_PORT,(Copy_u8Data<<4));
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	98 2f       	mov	r25, r24
    10c4:	92 95       	swap	r25
    10c6:	90 7f       	andi	r25, 0xF0	; 240
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	69 2f       	mov	r22, r25
    10cc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_HIGH);
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	62 e0       	ldi	r22, 0x02	; 2
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e4       	ldi	r27, 0x40	; 64
    10e2:	8b 87       	std	Y+11, r24	; 0x0b
    10e4:	9c 87       	std	Y+12, r25	; 0x0c
    10e6:	ad 87       	std	Y+13, r26	; 0x0d
    10e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a ef       	ldi	r20, 0xFA	; 250
    10f8:	54 e4       	ldi	r21, 0x44	; 68
    10fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8f 83       	std	Y+7, r24	; 0x07
    1104:	98 87       	std	Y+8, r25	; 0x08
    1106:	a9 87       	std	Y+9, r26	; 0x09
    1108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <CLCD_voidSendData+0x196>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <CLCD_voidSendData+0x214>
	else if (__tmp > 65535)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <CLCD_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6b 85       	ldd	r22, Y+11	; 0x0b
    1146:	7c 85       	ldd	r23, Y+12	; 0x0c
    1148:	8d 85       	ldd	r24, Y+13	; 0x0d
    114a:	9e 85       	ldd	r25, Y+14	; 0x0e
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	0f c0       	rjmp	.+30     	; 0x118c <CLCD_voidSendData+0x1f6>
    116e:	88 ec       	ldi	r24, 0xC8	; 200
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <CLCD_voidSendData+0x1e4>
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <CLCD_voidSendData+0x1d8>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <CLCD_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <CLCD_voidSendData+0x220>
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_LOW);
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	62 e0       	ldi	r22, 0x02	; 2
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	//Local_u8StringCounter++;
}
    11c8:	6d 96       	adiw	r28, 0x1d	; 29
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <CLCD_voidSendString>:
	//Local_u8StringCounter++;
}

#endif
void CLCD_voidSendString(const char *Copy_Pcstring)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <CLCD_voidSendString+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <CLCD_voidSendString+0x8>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <CLCD_voidSendString+0xa>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8Counter=0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	1a 82       	std	Y+2, r1	; 0x02
    11f0:	1b 82       	std	Y+3, r1	; 0x03
    11f2:	1c 82       	std	Y+4, r1	; 0x04
    11f4:	15 c0       	rjmp	.+42     	; 0x1220 <CLCD_voidSendString+0x46>
	while(Copy_Pcstring[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_Pcstring[Local_u8Counter]);
    11f6:	29 81       	ldd	r18, Y+1	; 0x01
    11f8:	3a 81       	ldd	r19, Y+2	; 0x02
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	fc 01       	movw	r30, r24
    1200:	e2 0f       	add	r30, r18
    1202:	f3 1f       	adc	r31, r19
    1204:	80 81       	ld	r24, Z
    1206:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
		Local_u8Counter++;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	ab 81       	ldd	r26, Y+3	; 0x03
    1210:	bc 81       	ldd	r27, Y+4	; 0x04
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	a1 1d       	adc	r26, r1
    1216:	b1 1d       	adc	r27, r1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	ab 83       	std	Y+3, r26	; 0x03
    121e:	bc 83       	std	Y+4, r27	; 0x04

#endif
void CLCD_voidSendString(const char *Copy_Pcstring)
{
	u32 Local_u8Counter=0;
	while(Copy_Pcstring[Local_u8Counter] != '\0')
    1220:	29 81       	ldd	r18, Y+1	; 0x01
    1222:	3a 81       	ldd	r19, Y+2	; 0x02
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	fc 01       	movw	r30, r24
    122a:	e2 0f       	add	r30, r18
    122c:	f3 1f       	adc	r31, r19
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	09 f7       	brne	.-62     	; 0x11f6 <CLCD_voidSendString+0x1c>
	{
		CLCD_voidSendData(Copy_Pcstring[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 copy_u8XPos, u8 copy_u8YPos)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <CLCD_voidGoToXY+0x6>
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	6b 83       	std	Y+3, r22	; 0x03
	//Local_u8StringCounter=copy_u8YPos;
	u8 Local_u8Address;
	if(copy_u8XPos==0)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	88 23       	and	r24, r24
    125a:	19 f4       	brne	.+6      	; 0x1262 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=copy_u8YPos;
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	06 c0       	rjmp	.+12     	; 0x126e <CLCD_voidGoToXY+0x28>
	}
	else if(copy_u8XPos==1)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	19 f4       	brne	.+6      	; 0x126e <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=copy_u8YPos+0x40;
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	80 5c       	subi	r24, 0xC0	; 192
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(0x80+Local_u8Address);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	80 58       	subi	r24, 0x80	; 128
    1272:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <CLCD_voidCLR>:

void CLCD_voidCLR(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
	//Local_u8StringCounter=0;
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <CLCD_void_WriteSpecialCharacter>:

void CLCD_void_WriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	27 97       	sbiw	r28, 0x07	; 7
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	6d 83       	std	Y+5, r22	; 0x05
    12b0:	4e 83       	std	Y+6, r20	; 0x06
    12b2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter=0;
    12b4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAddress+0x40);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	80 5c       	subi	r24, 0xC0	; 192
    12ce:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    12d2:	1a 82       	std	Y+2, r1	; 0x02
    12d4:	0e c0       	rjmp	.+28     	; 0x12f2 <CLCD_void_WriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
void CLCD_void_WriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
	u8 Local_u8Counter=0;
	u8 Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	CLCD_voidSendCommand(Local_u8CGRAMAddress+0x40);
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	78 f3       	brcs	.-34     	; 0x12d6 <CLCD_void_WriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	0e 94 23 09 	call	0x1246	; 0x1246 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
}
    1306:	27 96       	adiw	r28, 0x07	; 7
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <CLCD_void_SendNumber>:

void CLCD_void_SendNumber(s8* Copy_ps8String , s32 Copy_s32Number)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	a1 97       	sbiw	r28, 0x21	; 33
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	9d 8f       	std	Y+29, r25	; 0x1d
    132e:	8c 8f       	std	Y+28, r24	; 0x1c
    1330:	4e 8f       	std	Y+30, r20	; 0x1e
    1332:	5f 8f       	std	Y+31, r21	; 0x1f
    1334:	68 a3       	std	Y+32, r22	; 0x20
    1336:	79 a3       	std	Y+33, r23	; 0x21
	s8 Local_u8String[20];
	u8 Local_u8NumLength=0,Local_u8Rem,Local_u8Counter;
    1338:	1f 82       	std	Y+7, r1	; 0x07
	u32 Local_u32Num=Copy_s32Number;
    133a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    133c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    133e:	a8 a1       	ldd	r26, Y+32	; 0x20
    1340:	b9 a1       	ldd	r27, Y+33	; 0x21
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_s32Number==0)
    134a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    134c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134e:	a8 a1       	ldd	r26, Y+32	; 0x20
    1350:	b9 a1       	ldd	r27, Y+33	; 0x21
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	a1 05       	cpc	r26, r1
    1356:	b1 05       	cpc	r27, r1
    1358:	21 f4       	brne	.+8      	; 0x1362 <CLCD_void_SendNumber+0x4a>
	{
		Local_u8String[0]='0';
    135a:	80 e3       	ldi	r24, 0x30	; 48
    135c:	88 87       	std	Y+8, r24	; 0x08
		Local_u8String[1]='\0';
    135e:	19 86       	std	Y+9, r1	; 0x09
    1360:	7c c0       	rjmp	.+248    	; 0x145a <CLCD_void_SendNumber+0x142>
	}
	else
	{
		if(Copy_s32Number<0)
    1362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1364:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1366:	a8 a1       	ldd	r26, Y+32	; 0x20
    1368:	b9 a1       	ldd	r27, Y+33	; 0x21
    136a:	bb 23       	and	r27, r27
    136c:	44 f5       	brge	.+80     	; 0x13be <CLCD_void_SendNumber+0xa6>
		{
			CLCD_voidSendData('-');
    136e:	8d e2       	ldi	r24, 0x2D	; 45
    1370:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
			Copy_s32Number*=-1;
    1374:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1376:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1378:	a8 a1       	ldd	r26, Y+32	; 0x20
    137a:	b9 a1       	ldd	r27, Y+33	; 0x21
    137c:	b0 95       	com	r27
    137e:	a0 95       	com	r26
    1380:	90 95       	com	r25
    1382:	81 95       	neg	r24
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	af 4f       	sbci	r26, 0xFF	; 255
    1388:	bf 4f       	sbci	r27, 0xFF	; 255
    138a:	8e 8f       	std	Y+30, r24	; 0x1e
    138c:	9f 8f       	std	Y+31, r25	; 0x1f
    138e:	a8 a3       	std	Y+32, r26	; 0x20
    1390:	b9 a3       	std	Y+33, r27	; 0x21
    1392:	15 c0       	rjmp	.+42     	; 0x13be <CLCD_void_SendNumber+0xa6>
		}
		while(Local_u32Num!=0)
		{
			Local_u8NumLength++;
    1394:	8f 81       	ldd	r24, Y+7	; 0x07
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	8f 83       	std	Y+7, r24	; 0x07
			Local_u32Num/=10;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	ab 81       	ldd	r26, Y+3	; 0x03
    13a0:	bc 81       	ldd	r27, Y+4	; 0x04
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__udivmodsi4>
    13b2:	da 01       	movw	r26, r20
    13b4:	c9 01       	movw	r24, r18
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	ab 83       	std	Y+3, r26	; 0x03
    13bc:	bc 83       	std	Y+4, r27	; 0x04
		if(Copy_s32Number<0)
		{
			CLCD_voidSendData('-');
			Copy_s32Number*=-1;
		}
		while(Local_u32Num!=0)
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	ab 81       	ldd	r26, Y+3	; 0x03
    13c4:	bc 81       	ldd	r27, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	a1 05       	cpc	r26, r1
    13ca:	b1 05       	cpc	r27, r1
    13cc:	19 f7       	brne	.-58     	; 0x1394 <CLCD_void_SendNumber+0x7c>
		{
			Local_u8NumLength++;
			Local_u32Num/=10;
		}
		for(Local_u8Counter=0;Local_u8Counter<Local_u8NumLength;Local_u8Counter++)
    13ce:	1d 82       	std	Y+5, r1	; 0x05
    13d0:	37 c0       	rjmp	.+110    	; 0x1440 <CLCD_void_SendNumber+0x128>
		{
			Local_u8Rem=Copy_s32Number%10;
    13d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13d6:	a8 a1       	ldd	r26, Y+32	; 0x20
    13d8:	b9 a1       	ldd	r27, Y+33	; 0x21
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8e 83       	std	Y+6, r24	; 0x06
			Copy_s32Number/=10;
    13f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13f4:	a8 a1       	ldd	r26, Y+32	; 0x20
    13f6:	b9 a1       	ldd	r27, Y+33	; 0x21
    13f8:	2a e0       	ldi	r18, 0x0A	; 10
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    1408:	da 01       	movw	r26, r20
    140a:	c9 01       	movw	r24, r18
    140c:	8e 8f       	std	Y+30, r24	; 0x1e
    140e:	9f 8f       	std	Y+31, r25	; 0x1f
    1410:	a8 a3       	std	Y+32, r26	; 0x20
    1412:	b9 a3       	std	Y+33, r27	; 0x21
			Local_u8String[Local_u8NumLength-(Local_u8Counter+1)]=Local_u8Rem+'0';
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	80 95       	com	r24
    1422:	90 95       	com	r25
    1424:	28 0f       	add	r18, r24
    1426:	39 1f       	adc	r19, r25
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	80 5d       	subi	r24, 0xD0	; 208
    142c:	48 2f       	mov	r20, r24
    142e:	ce 01       	movw	r24, r28
    1430:	08 96       	adiw	r24, 0x08	; 8
    1432:	fc 01       	movw	r30, r24
    1434:	e2 0f       	add	r30, r18
    1436:	f3 1f       	adc	r31, r19
    1438:	40 83       	st	Z, r20
		while(Local_u32Num!=0)
		{
			Local_u8NumLength++;
			Local_u32Num/=10;
		}
		for(Local_u8Counter=0;Local_u8Counter<Local_u8NumLength;Local_u8Counter++)
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 17       	cp	r25, r24
    1446:	28 f2       	brcs	.-118    	; 0x13d2 <CLCD_void_SendNumber+0xba>
		{
			Local_u8Rem=Copy_s32Number%10;
			Copy_s32Number/=10;
			Local_u8String[Local_u8NumLength-(Local_u8Counter+1)]=Local_u8Rem+'0';
		}
		Local_u8String[Local_u8NumLength]='\0';
    1448:	8f 81       	ldd	r24, Y+7	; 0x07
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	ce 01       	movw	r24, r28
    1450:	08 96       	adiw	r24, 0x08	; 8
    1452:	fc 01       	movw	r30, r24
    1454:	e2 0f       	add	r30, r18
    1456:	f3 1f       	adc	r31, r19
    1458:	10 82       	st	Z, r1
	}
	CLCD_voidSendString(Local_u8String);
    145a:	ce 01       	movw	r24, r28
    145c:	08 96       	adiw	r24, 0x08	; 8
    145e:	0e 94 ed 08 	call	0x11da	; 0x11da <CLCD_voidSendString>
}
    1462:	a1 96       	adiw	r28, 0x21	; 33
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LCD_WriteNumber>:


void LCD_WriteNumber (s32 num)
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	60 97       	sbiw	r28, 0x10	; 16
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	6d 87       	std	Y+13, r22	; 0x0d
    148e:	7e 87       	std	Y+14, r23	; 0x0e
    1490:	8f 87       	std	Y+15, r24	; 0x0f
    1492:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,str[10];
    1494:	1a 82       	std	Y+2, r1	; 0x02
	s8 j;

	if(num==0)
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	af 85       	ldd	r26, Y+15	; 0x0f
    149c:	b8 89       	ldd	r27, Y+16	; 0x10
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	a1 05       	cpc	r26, r1
    14a2:	b1 05       	cpc	r27, r1
    14a4:	21 f4       	brne	.+8      	; 0x14ae <LCD_WriteNumber+0x3a>
	{
		CLCD_voidSendData('0');
    14a6:	80 e3       	ldi	r24, 0x30	; 48
    14a8:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
    14ac:	67 c0       	rjmp	.+206    	; 0x157c <LCD_WriteNumber+0x108>
		return;
	}
	if(num<0)
    14ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b2:	af 85       	ldd	r26, Y+15	; 0x0f
    14b4:	b8 89       	ldd	r27, Y+16	; 0x10
    14b6:	bb 23       	and	r27, r27
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <LCD_WriteNumber+0x48>
    14ba:	41 c0       	rjmp	.+130    	; 0x153e <LCD_WriteNumber+0xca>
	{
		CLCD_voidSendData('-');
    14bc:	8d e2       	ldi	r24, 0x2D	; 45
    14be:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
		num=num*(-1);
    14c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c6:	af 85       	ldd	r26, Y+15	; 0x0f
    14c8:	b8 89       	ldd	r27, Y+16	; 0x10
    14ca:	b0 95       	com	r27
    14cc:	a0 95       	com	r26
    14ce:	90 95       	com	r25
    14d0:	81 95       	neg	r24
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	af 4f       	sbci	r26, 0xFF	; 255
    14d6:	bf 4f       	sbci	r27, 0xFF	; 255
    14d8:	8d 87       	std	Y+13, r24	; 0x0d
    14da:	9e 87       	std	Y+14, r25	; 0x0e
    14dc:	af 87       	std	Y+15, r26	; 0x0f
    14de:	b8 8b       	std	Y+16, r27	; 0x10
    14e0:	2e c0       	rjmp	.+92     	; 0x153e <LCD_WriteNumber+0xca>
	}

	while(num)
	{
		str[i]=(num%10)+'0';
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	08 2f       	mov	r16, r24
    14e6:	10 e0       	ldi	r17, 0x00	; 0
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	af 85       	ldd	r26, Y+15	; 0x0f
    14ee:	b8 89       	ldd	r27, Y+16	; 0x10
    14f0:	2a e0       	ldi	r18, 0x0A	; 10
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	28 2f       	mov	r18, r24
    1506:	20 5d       	subi	r18, 0xD0	; 208
    1508:	ce 01       	movw	r24, r28
    150a:	03 96       	adiw	r24, 0x03	; 3
    150c:	fc 01       	movw	r30, r24
    150e:	e0 0f       	add	r30, r16
    1510:	f1 1f       	adc	r31, r17
    1512:	20 83       	st	Z, r18
		num=num/10;
    1514:	8d 85       	ldd	r24, Y+13	; 0x0d
    1516:	9e 85       	ldd	r25, Y+14	; 0x0e
    1518:	af 85       	ldd	r26, Y+15	; 0x0f
    151a:	b8 89       	ldd	r27, Y+16	; 0x10
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    152c:	da 01       	movw	r26, r20
    152e:	c9 01       	movw	r24, r18
    1530:	8d 87       	std	Y+13, r24	; 0x0d
    1532:	9e 87       	std	Y+14, r25	; 0x0e
    1534:	af 87       	std	Y+15, r26	; 0x0f
    1536:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		num=num*(-1);
	}

	while(num)
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	af 85       	ldd	r26, Y+15	; 0x0f
    1544:	b8 89       	ldd	r27, Y+16	; 0x10
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	a1 05       	cpc	r26, r1
    154a:	b1 05       	cpc	r27, r1
    154c:	51 f6       	brne	.-108    	; 0x14e2 <LCD_WriteNumber+0x6e>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	81 50       	subi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	10 c0       	rjmp	.+32     	; 0x1576 <LCD_WriteNumber+0x102>
	{

		CLCD_voidSendData(str[j]);
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	33 27       	eor	r19, r19
    155c:	27 fd       	sbrc	r18, 7
    155e:	30 95       	com	r19
    1560:	ce 01       	movw	r24, r28
    1562:	03 96       	adiw	r24, 0x03	; 3
    1564:	fc 01       	movw	r30, r24
    1566:	e2 0f       	add	r30, r18
    1568:	f3 1f       	adc	r31, r19
    156a:	80 81       	ld	r24, Z
    156c:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	81 50       	subi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	88 23       	and	r24, r24
    157a:	6c f7       	brge	.-38     	; 0x1556 <LCD_WriteNumber+0xe2>
	{

		CLCD_voidSendData(str[j]);
	}
}
    157c:	60 96       	adiw	r28, 0x10	; 16
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <LCD_SetCursor>:
void LCD_SetCursor(u8 line ,u8 cell)        // line 0:1  cell 0:15
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <LCD_SetCursor+0x6>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	29 f4       	brne	.+10     	; 0x15b0 <LCD_SetCursor+0x1e>
	{
		CLCD_voidSendCommand(0x80|cell);   // set dd ram address to line 0 and set the cell that the user has entered
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
    15ae:	07 c0       	rjmp	.+14     	; 0x15be <LCD_SetCursor+0x2c>
	}
	else if(line==1)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	21 f4       	brne	.+8      	; 0x15be <LCD_SetCursor+0x2c>
	{
		CLCD_voidSendCommand(0x80|0x40|cell);  // set dd ram address to line 1 and set the cell that the user has entered
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 6c       	ori	r24, 0xC0	; 192
    15ba:	0e 94 a9 06 	call	0xd52	; 0xd52 <CLCD_voidSendCommand>
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <CLCD_SendInt>:
void CLCD_SendInt (s32 num)
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	60 97       	sbiw	r28, 0x10	; 16
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	6d 87       	std	Y+13, r22	; 0x0d
    15e2:	7e 87       	std	Y+14, r23	; 0x0e
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,str[10];
    15e8:	1a 82       	std	Y+2, r1	; 0x02
	s8 j;

	if(num==0)
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	af 85       	ldd	r26, Y+15	; 0x0f
    15f0:	b8 89       	ldd	r27, Y+16	; 0x10
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	a1 05       	cpc	r26, r1
    15f6:	b1 05       	cpc	r27, r1
    15f8:	21 f4       	brne	.+8      	; 0x1602 <CLCD_SendInt+0x3a>
	{
		CLCD_voidSendData('0');
    15fa:	80 e3       	ldi	r24, 0x30	; 48
    15fc:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
    1600:	67 c0       	rjmp	.+206    	; 0x16d0 <CLCD_SendInt+0x108>
		return;
	}
	if(num<0)
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	af 85       	ldd	r26, Y+15	; 0x0f
    1608:	b8 89       	ldd	r27, Y+16	; 0x10
    160a:	bb 23       	and	r27, r27
    160c:	0c f0       	brlt	.+2      	; 0x1610 <CLCD_SendInt+0x48>
    160e:	41 c0       	rjmp	.+130    	; 0x1692 <CLCD_SendInt+0xca>
	{
		CLCD_voidSendData('-');
    1610:	8d e2       	ldi	r24, 0x2D	; 45
    1612:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
		num=num*(-1);
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	af 85       	ldd	r26, Y+15	; 0x0f
    161c:	b8 89       	ldd	r27, Y+16	; 0x10
    161e:	b0 95       	com	r27
    1620:	a0 95       	com	r26
    1622:	90 95       	com	r25
    1624:	81 95       	neg	r24
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	af 4f       	sbci	r26, 0xFF	; 255
    162a:	bf 4f       	sbci	r27, 0xFF	; 255
    162c:	8d 87       	std	Y+13, r24	; 0x0d
    162e:	9e 87       	std	Y+14, r25	; 0x0e
    1630:	af 87       	std	Y+15, r26	; 0x0f
    1632:	b8 8b       	std	Y+16, r27	; 0x10
    1634:	2e c0       	rjmp	.+92     	; 0x1692 <CLCD_SendInt+0xca>
	}

	while(num)
	{
		str[i]=(num%10)+'0';
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	08 2f       	mov	r16, r24
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	af 85       	ldd	r26, Y+15	; 0x0f
    1642:	b8 89       	ldd	r27, Y+16	; 0x10
    1644:	2a e0       	ldi	r18, 0x0A	; 10
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	28 2f       	mov	r18, r24
    165a:	20 5d       	subi	r18, 0xD0	; 208
    165c:	ce 01       	movw	r24, r28
    165e:	03 96       	adiw	r24, 0x03	; 3
    1660:	fc 01       	movw	r30, r24
    1662:	e0 0f       	add	r30, r16
    1664:	f1 1f       	adc	r31, r17
    1666:	20 83       	st	Z, r18
		num=num/10;
    1668:	8d 85       	ldd	r24, Y+13	; 0x0d
    166a:	9e 85       	ldd	r25, Y+14	; 0x0e
    166c:	af 85       	ldd	r26, Y+15	; 0x0f
    166e:	b8 89       	ldd	r27, Y+16	; 0x10
    1670:	2a e0       	ldi	r18, 0x0A	; 10
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__divmodsi4>
    1680:	da 01       	movw	r26, r20
    1682:	c9 01       	movw	r24, r18
    1684:	8d 87       	std	Y+13, r24	; 0x0d
    1686:	9e 87       	std	Y+14, r25	; 0x0e
    1688:	af 87       	std	Y+15, r26	; 0x0f
    168a:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		num=num*(-1);
	}

	while(num)
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	af 85       	ldd	r26, Y+15	; 0x0f
    1698:	b8 89       	ldd	r27, Y+16	; 0x10
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	a1 05       	cpc	r26, r1
    169e:	b1 05       	cpc	r27, r1
    16a0:	51 f6       	brne	.-108    	; 0x1636 <CLCD_SendInt+0x6e>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	10 c0       	rjmp	.+32     	; 0x16ca <CLCD_SendInt+0x102>
	{

		CLCD_voidSendData(str[j]);
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	33 27       	eor	r19, r19
    16b0:	27 fd       	sbrc	r18, 7
    16b2:	30 95       	com	r19
    16b4:	ce 01       	movw	r24, r28
    16b6:	03 96       	adiw	r24, 0x03	; 3
    16b8:	fc 01       	movw	r30, r24
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
    16be:	80 81       	ld	r24, Z
    16c0:	0e 94 cb 07 	call	0xf96	; 0xf96 <CLCD_voidSendData>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	81 50       	subi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 23       	and	r24, r24
    16ce:	6c f7       	brge	.-38     	; 0x16aa <CLCD_SendInt+0xe2>
	{

		CLCD_voidSendData(str[j]);
	}
}
    16d0:	60 96       	adiw	r28, 0x10	; 16
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <Stepper_Motor_Forward>:
#include <util/delay.h>
#include "MDIO_interface.h"
#include "DC_Motor.h"

void Stepper_Motor_Forward(void)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	e8 97       	sbiw	r28, 0x38	; 56
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_LOW);
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_LOW);
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    1722:	84 e0       	ldi	r24, 0x04	; 4
    1724:	63 e0       	ldi	r22, 0x03	; 3
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e4       	ldi	r27, 0x40	; 64
    1734:	8d ab       	std	Y+53, r24	; 0x35
    1736:	9e ab       	std	Y+54, r25	; 0x36
    1738:	af ab       	std	Y+55, r26	; 0x37
    173a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6d a9       	ldd	r22, Y+53	; 0x35
    173e:	7e a9       	ldd	r23, Y+54	; 0x36
    1740:	8f a9       	ldd	r24, Y+55	; 0x37
    1742:	98 ad       	ldd	r25, Y+56	; 0x38
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	89 ab       	std	Y+49, r24	; 0x31
    1756:	9a ab       	std	Y+50, r25	; 0x32
    1758:	ab ab       	std	Y+51, r26	; 0x33
    175a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    175c:	69 a9       	ldd	r22, Y+49	; 0x31
    175e:	7a a9       	ldd	r23, Y+50	; 0x32
    1760:	8b a9       	ldd	r24, Y+51	; 0x33
    1762:	9c a9       	ldd	r25, Y+52	; 0x34
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <Stepper_Motor_Forward+0x98>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	98 ab       	std	Y+48, r25	; 0x30
    177a:	8f a7       	std	Y+47, r24	; 0x2f
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <Stepper_Motor_Forward+0x116>
	else if (__tmp > 65535)
    177e:	69 a9       	ldd	r22, Y+49	; 0x31
    1780:	7a a9       	ldd	r23, Y+50	; 0x32
    1782:	8b a9       	ldd	r24, Y+51	; 0x33
    1784:	9c a9       	ldd	r25, Y+52	; 0x34
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <Stepper_Motor_Forward+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6d a9       	ldd	r22, Y+53	; 0x35
    1798:	7e a9       	ldd	r23, Y+54	; 0x36
    179a:	8f a9       	ldd	r24, Y+55	; 0x37
    179c:	98 ad       	ldd	r25, Y+56	; 0x38
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	98 ab       	std	Y+48, r25	; 0x30
    17bc:	8f a7       	std	Y+47, r24	; 0x2f
    17be:	0f c0       	rjmp	.+30     	; 0x17de <Stepper_Motor_Forward+0xf8>
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9e a7       	std	Y+46, r25	; 0x2e
    17c6:	8d a7       	std	Y+45, r24	; 0x2d
    17c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <Stepper_Motor_Forward+0xe6>
    17d0:	9e a7       	std	Y+46, r25	; 0x2e
    17d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d6:	98 a9       	ldd	r25, Y+48	; 0x30
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	98 ab       	std	Y+48, r25	; 0x30
    17dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e0:	98 a9       	ldd	r25, Y+48	; 0x30
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <Stepper_Motor_Forward+0xda>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <Stepper_Motor_Forward+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ea:	7a a9       	ldd	r23, Y+50	; 0x32
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	9c a9       	ldd	r25, Y+52	; 0x34
    17f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	98 ab       	std	Y+48, r25	; 0x30
    17fa:	8f a7       	std	Y+47, r24	; 0x2f
    17fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1800:	9c a7       	std	Y+44, r25	; 0x2c
    1802:	8b a7       	std	Y+43, r24	; 0x2b
    1804:	8b a5       	ldd	r24, Y+43	; 0x2b
    1806:	9c a5       	ldd	r25, Y+44	; 0x2c
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <Stepper_Motor_Forward+0x122>
    180c:	9c a7       	std	Y+44, r25	; 0x2c
    180e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_LOW);
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	62 e0       	ldi	r22, 0x02	; 2
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	63 e0       	ldi	r22, 0x03	; 3
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e4       	ldi	r27, 0x40	; 64
    1840:	8f a3       	std	Y+39, r24	; 0x27
    1842:	98 a7       	std	Y+40, r25	; 0x28
    1844:	a9 a7       	std	Y+41, r26	; 0x29
    1846:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1848:	6f a1       	ldd	r22, Y+39	; 0x27
    184a:	78 a5       	ldd	r23, Y+40	; 0x28
    184c:	89 a5       	ldd	r24, Y+41	; 0x29
    184e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	4a ef       	ldi	r20, 0xFA	; 250
    1856:	54 e4       	ldi	r21, 0x44	; 68
    1858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	8b a3       	std	Y+35, r24	; 0x23
    1862:	9c a3       	std	Y+36, r25	; 0x24
    1864:	ad a3       	std	Y+37, r26	; 0x25
    1866:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1868:	6b a1       	ldd	r22, Y+35	; 0x23
    186a:	7c a1       	ldd	r23, Y+36	; 0x24
    186c:	8d a1       	ldd	r24, Y+37	; 0x25
    186e:	9e a1       	ldd	r25, Y+38	; 0x26
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	5f e3       	ldi	r21, 0x3F	; 63
    1878:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    187c:	88 23       	and	r24, r24
    187e:	2c f4       	brge	.+10     	; 0x188a <Stepper_Motor_Forward+0x1a4>
		__ticks = 1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9a a3       	std	Y+34, r25	; 0x22
    1886:	89 a3       	std	Y+33, r24	; 0x21
    1888:	3f c0       	rjmp	.+126    	; 0x1908 <Stepper_Motor_Forward+0x222>
	else if (__tmp > 65535)
    188a:	6b a1       	ldd	r22, Y+35	; 0x23
    188c:	7c a1       	ldd	r23, Y+36	; 0x24
    188e:	8d a1       	ldd	r24, Y+37	; 0x25
    1890:	9e a1       	ldd	r25, Y+38	; 0x26
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	3f ef       	ldi	r19, 0xFF	; 255
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	57 e4       	ldi	r21, 0x47	; 71
    189a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	4c f5       	brge	.+82     	; 0x18f4 <Stepper_Motor_Forward+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	6f a1       	ldd	r22, Y+39	; 0x27
    18a4:	78 a5       	ldd	r23, Y+40	; 0x28
    18a6:	89 a5       	ldd	r24, Y+41	; 0x29
    18a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e2       	ldi	r20, 0x20	; 32
    18b0:	51 e4       	ldi	r21, 0x41	; 65
    18b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	bc 01       	movw	r22, r24
    18bc:	cd 01       	movw	r24, r26
    18be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9a a3       	std	Y+34, r25	; 0x22
    18c8:	89 a3       	std	Y+33, r24	; 0x21
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <Stepper_Motor_Forward+0x204>
    18cc:	88 ec       	ldi	r24, 0xC8	; 200
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	98 a3       	std	Y+32, r25	; 0x20
    18d2:	8f 8f       	std	Y+31, r24	; 0x1f
    18d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18d6:	98 a1       	ldd	r25, Y+32	; 0x20
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <Stepper_Motor_Forward+0x1f2>
    18dc:	98 a3       	std	Y+32, r25	; 0x20
    18de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e0:	89 a1       	ldd	r24, Y+33	; 0x21
    18e2:	9a a1       	ldd	r25, Y+34	; 0x22
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	9a a3       	std	Y+34, r25	; 0x22
    18e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ea:	89 a1       	ldd	r24, Y+33	; 0x21
    18ec:	9a a1       	ldd	r25, Y+34	; 0x22
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	69 f7       	brne	.-38     	; 0x18cc <Stepper_Motor_Forward+0x1e6>
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <Stepper_Motor_Forward+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9a a3       	std	Y+34, r25	; 0x22
    1906:	89 a3       	std	Y+33, r24	; 0x21
    1908:	89 a1       	ldd	r24, Y+33	; 0x21
    190a:	9a a1       	ldd	r25, Y+34	; 0x22
    190c:	9e 8f       	std	Y+30, r25	; 0x1e
    190e:	8d 8f       	std	Y+29, r24	; 0x1d
    1910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1912:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <Stepper_Motor_Forward+0x22e>
    1918:	9e 8f       	std	Y+30, r25	; 0x1e
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    1926:	84 e0       	ldi	r24, 0x04	; 4
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_LOW);
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	63 e0       	ldi	r22, 0x03	; 3
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	b0 e4       	ldi	r27, 0x40	; 64
    194c:	89 8f       	std	Y+25, r24	; 0x19
    194e:	9a 8f       	std	Y+26, r25	; 0x1a
    1950:	ab 8f       	std	Y+27, r26	; 0x1b
    1952:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1954:	69 8d       	ldd	r22, Y+25	; 0x19
    1956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8d 8b       	std	Y+21, r24	; 0x15
    196e:	9e 8b       	std	Y+22, r25	; 0x16
    1970:	af 8b       	std	Y+23, r26	; 0x17
    1972:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	2c f4       	brge	.+10     	; 0x1996 <Stepper_Motor_Forward+0x2b0>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 8b       	std	Y+20, r25	; 0x14
    1992:	8b 8b       	std	Y+19, r24	; 0x13
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <Stepper_Motor_Forward+0x32e>
	else if (__tmp > 65535)
    1996:	6d 89       	ldd	r22, Y+21	; 0x15
    1998:	7e 89       	ldd	r23, Y+22	; 0x16
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	3f ef       	ldi	r19, 0xFF	; 255
    19a2:	4f e7       	ldi	r20, 0x7F	; 127
    19a4:	57 e4       	ldi	r21, 0x47	; 71
    19a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	4c f5       	brge	.+82     	; 0x1a00 <Stepper_Motor_Forward+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ae:	69 8d       	ldd	r22, Y+25	; 0x19
    19b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	bc 01       	movw	r22, r24
    19c8:	cd 01       	movw	r24, r26
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
    19d4:	8b 8b       	std	Y+19, r24	; 0x13
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <Stepper_Motor_Forward+0x310>
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9a 8b       	std	Y+18, r25	; 0x12
    19de:	89 8b       	std	Y+17, r24	; 0x11
    19e0:	89 89       	ldd	r24, Y+17	; 0x11
    19e2:	9a 89       	ldd	r25, Y+18	; 0x12
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <Stepper_Motor_Forward+0x2fe>
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
    19ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ec:	8b 89       	ldd	r24, Y+19	; 0x13
    19ee:	9c 89       	ldd	r25, Y+20	; 0x14
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	9c 8b       	std	Y+20, r25	; 0x14
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	8b 89       	ldd	r24, Y+19	; 0x13
    19f8:	9c 89       	ldd	r25, Y+20	; 0x14
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	69 f7       	brne	.-38     	; 0x19d8 <Stepper_Motor_Forward+0x2f2>
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <Stepper_Motor_Forward+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	8b 89       	ldd	r24, Y+19	; 0x13
    1a16:	9c 89       	ldd	r25, Y+20	; 0x14
    1a18:	98 8b       	std	Y+16, r25	; 0x10
    1a1a:	8f 87       	std	Y+15, r24	; 0x0f
    1a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1e:	98 89       	ldd	r25, Y+16	; 0x10
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <Stepper_Motor_Forward+0x33a>
    1a24:	98 8b       	std	Y+16, r25	; 0x10
    1a26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    1a32:	84 e0       	ldi	r24, 0x04	; 4
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	62 e0       	ldi	r22, 0x02	; 2
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_LOW);
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	63 e0       	ldi	r22, 0x03	; 3
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e4       	ldi	r27, 0x40	; 64
    1a58:	8b 87       	std	Y+11, r24	; 0x0b
    1a5a:	9c 87       	std	Y+12, r25	; 0x0c
    1a5c:	ad 87       	std	Y+13, r26	; 0x0d
    1a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8f 83       	std	Y+7, r24	; 0x07
    1a7a:	98 87       	std	Y+8, r25	; 0x08
    1a7c:	a9 87       	std	Y+9, r26	; 0x09
    1a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <Stepper_Motor_Forward+0x3bc>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <Stepper_Motor_Forward+0x43a>
	else if (__tmp > 65535)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <Stepper_Motor_Forward+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <Stepper_Motor_Forward+0x41c>
    1ae4:	88 ec       	ldi	r24, 0xC8	; 200
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <Stepper_Motor_Forward+0x40a>
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <Stepper_Motor_Forward+0x3fe>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <Stepper_Motor_Forward+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <Stepper_Motor_Forward+0x446>
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    1b34:	e8 96       	adiw	r28, 0x38	; 56
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <Stepper_Motor_Reverse>:
void Stepper_Motor_Reverse(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	e8 97       	sbiw	r28, 0x38	; 56
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_LOW);
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	63 e0       	ldi	r22, 0x03	; 3
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	62 e0       	ldi	r22, 0x02	; 2
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    1b6e:	84 e0       	ldi	r24, 0x04	; 4
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e4       	ldi	r27, 0x40	; 64
    1b8a:	8d ab       	std	Y+53, r24	; 0x35
    1b8c:	9e ab       	std	Y+54, r25	; 0x36
    1b8e:	af ab       	std	Y+55, r26	; 0x37
    1b90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b92:	6d a9       	ldd	r22, Y+53	; 0x35
    1b94:	7e a9       	ldd	r23, Y+54	; 0x36
    1b96:	8f a9       	ldd	r24, Y+55	; 0x37
    1b98:	98 ad       	ldd	r25, Y+56	; 0x38
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ba0:	54 e4       	ldi	r21, 0x44	; 68
    1ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	89 ab       	std	Y+49, r24	; 0x31
    1bac:	9a ab       	std	Y+50, r25	; 0x32
    1bae:	ab ab       	std	Y+51, r26	; 0x33
    1bb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <Stepper_Motor_Reverse+0x8e>
		__ticks = 1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	98 ab       	std	Y+48, r25	; 0x30
    1bd0:	8f a7       	std	Y+47, r24	; 0x2f
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <Stepper_Motor_Reverse+0x10c>
	else if (__tmp > 65535)
    1bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bda:	9c a9       	ldd	r25, Y+52	; 0x34
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	4c f5       	brge	.+82     	; 0x1c3e <Stepper_Motor_Reverse+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	6d a9       	ldd	r22, Y+53	; 0x35
    1bee:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	98 ab       	std	Y+48, r25	; 0x30
    1c12:	8f a7       	std	Y+47, r24	; 0x2f
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <Stepper_Motor_Reverse+0xee>
    1c16:	88 ec       	ldi	r24, 0xC8	; 200
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e a7       	std	Y+46, r25	; 0x2e
    1c1c:	8d a7       	std	Y+45, r24	; 0x2d
    1c1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c20:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <Stepper_Motor_Reverse+0xdc>
    1c26:	9e a7       	std	Y+46, r25	; 0x2e
    1c28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	98 ab       	std	Y+48, r25	; 0x30
    1c32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c36:	98 a9       	ldd	r25, Y+48	; 0x30
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <Stepper_Motor_Reverse+0xd0>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <Stepper_Motor_Reverse+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c40:	7a a9       	ldd	r23, Y+50	; 0x32
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9c a9       	ldd	r25, Y+52	; 0x34
    1c46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	9c a7       	std	Y+44, r25	; 0x2c
    1c58:	8b a7       	std	Y+43, r24	; 0x2b
    1c5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <Stepper_Motor_Reverse+0x118>
    1c62:	9c a7       	std	Y+44, r25	; 0x2c
    1c64:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	63 e0       	ldi	r22, 0x03	; 3
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_LOW);
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    1c7a:	84 e0       	ldi	r24, 0x04	; 4
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e4       	ldi	r27, 0x40	; 64
    1c96:	8f a3       	std	Y+39, r24	; 0x27
    1c98:	98 a7       	std	Y+40, r25	; 0x28
    1c9a:	a9 a7       	std	Y+41, r26	; 0x29
    1c9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8b a3       	std	Y+35, r24	; 0x23
    1cb8:	9c a3       	std	Y+36, r25	; 0x24
    1cba:	ad a3       	std	Y+37, r26	; 0x25
    1cbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <Stepper_Motor_Reverse+0x19a>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <Stepper_Motor_Reverse+0x218>
	else if (__tmp > 65535)
    1ce0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <Stepper_Motor_Reverse+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <Stepper_Motor_Reverse+0x1fa>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 a3       	std	Y+32, r25	; 0x20
    1d28:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <Stepper_Motor_Reverse+0x1e8>
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <Stepper_Motor_Reverse+0x1dc>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <Stepper_Motor_Reverse+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d50:	9e a1       	ldd	r25, Y+38	; 0x26
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	9e 8f       	std	Y+30, r25	; 0x1e
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <Stepper_Motor_Reverse+0x224>
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	63 e0       	ldi	r22, 0x03	; 3
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_LOW);
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_HIGH);
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e4       	ldi	r27, 0x40	; 64
    1da2:	89 8f       	std	Y+25, r24	; 0x19
    1da4:	9a 8f       	std	Y+26, r25	; 0x1a
    1da6:	ab 8f       	std	Y+27, r26	; 0x1b
    1da8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8d 8b       	std	Y+21, r24	; 0x15
    1dc4:	9e 8b       	std	Y+22, r25	; 0x16
    1dc6:	af 8b       	std	Y+23, r26	; 0x17
    1dc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dca:	6d 89       	ldd	r22, Y+21	; 0x15
    1dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dce:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <Stepper_Motor_Reverse+0x2a6>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
    1de8:	8b 8b       	std	Y+19, r24	; 0x13
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <Stepper_Motor_Reverse+0x324>
	else if (__tmp > 65535)
    1dec:	6d 89       	ldd	r22, Y+21	; 0x15
    1dee:	7e 89       	ldd	r23, Y+22	; 0x16
    1df0:	8f 89       	ldd	r24, Y+23	; 0x17
    1df2:	98 8d       	ldd	r25, Y+24	; 0x18
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <Stepper_Motor_Reverse+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 8d       	ldd	r22, Y+25	; 0x19
    1e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <Stepper_Motor_Reverse+0x306>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	89 8b       	std	Y+17, r24	; 0x11
    1e36:	89 89       	ldd	r24, Y+17	; 0x11
    1e38:	9a 89       	ldd	r25, Y+18	; 0x12
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <Stepper_Motor_Reverse+0x2f4>
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <Stepper_Motor_Reverse+0x2e8>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <Stepper_Motor_Reverse+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	6d 89       	ldd	r22, Y+21	; 0x15
    1e58:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9c 8b       	std	Y+20, r25	; 0x14
    1e68:	8b 8b       	std	Y+19, r24	; 0x13
    1e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    1e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e74:	98 89       	ldd	r25, Y+16	; 0x10
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <Stepper_Motor_Reverse+0x330>
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN4,DIO_HIGH);
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN3,DIO_HIGH);
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN2,DIO_HIGH);
    1e92:	84 e0       	ldi	r24, 0x04	; 4
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTORSTEEPER_PORT,MOTORSTEEPER_PIN1,DIO_LOW);
    1e9c:	84 e0       	ldi	r24, 0x04	; 4
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	b0 e4       	ldi	r27, 0x40	; 64
    1eae:	8b 87       	std	Y+11, r24	; 0x0b
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	ad 87       	std	Y+13, r26	; 0x0d
    1eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a ef       	ldi	r20, 0xFA	; 250
    1ec4:	54 e4       	ldi	r21, 0x44	; 68
    1ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <Stepper_Motor_Reverse+0x3b2>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <Stepper_Motor_Reverse+0x430>
	else if (__tmp > 65535)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <Stepper_Motor_Reverse+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <Stepper_Motor_Reverse+0x412>
    1f3a:	88 ec       	ldi	r24, 0xC8	; 200
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <Stepper_Motor_Reverse+0x400>
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <Stepper_Motor_Reverse+0x3f4>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <Stepper_Motor_Reverse+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <Stepper_Motor_Reverse+0x43c>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    1f8a:	e8 96       	adiw	r28, 0x38	; 56
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <DC_Motor_Forward>:

void DC_Motor_Forward(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN2 ,DIO_LOW);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN1,DIO_HIGH);
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
}
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <DC_Motor_Reverse>:
void DC_Motor_Reverse(void)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN2 ,DIO_HIGH);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN1,DIO_LOW);
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <DC_Motor_Stop>:
void DC_Motor_Stop(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN2 ,DIO_LOW);
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
	MDIO_Error_State_tSetPinValue(MOTOR_DCTransPORT,MOTOR_DCPIN1,DIO_LOW);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
}
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <HKeyPad_u8GetKey>:
#include "HKEY_PAD_interface.h"
#include "HKEY_PAD_config.h"


u8 HKeyPad_u8GetKey (void)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	a2 97       	sbiw	r28, 0x22	; 34
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = 0xff;
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8KeyIsPressed = NOT_PRESSED;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	8d 83       	std	Y+5, r24	; 0x05

	u8 Local_u8ColIterator=0;
    201e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8RowIterator=0;
    2020:	1a 82       	std	Y+2, r1	; 0x02


	u8 Col_array[COL_SIZE] = {KEYPAD_C0, KEYPAD_C1, KEYPAD_C2, KEYPAD_C3};
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	8e 83       	std	Y+6, r24	; 0x06
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	88 87       	std	Y+8, r24	; 0x08
    202e:	85 e0       	ldi	r24, 0x05	; 5
    2030:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_array[ROW_SIZE] = {KEYPAD_R0, KEYPAD_R1, KEYPAD_R2, KEYPAD_R3};
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	8a 87       	std	Y+10, r24	; 0x0a
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	8c 87       	std	Y+12, r24	; 0x0c
    203e:	85 e0       	ldi	r24, 0x05	; 5
    2040:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;
    2042:	ce 01       	movw	r24, r28
    2044:	0e 96       	adiw	r24, 0x0e	; 14
    2046:	9f 8f       	std	Y+31, r25	; 0x1f
    2048:	8e 8f       	std	Y+30, r24	; 0x1e
    204a:	e8 e6       	ldi	r30, 0x68	; 104
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	f9 a3       	std	Y+33, r31	; 0x21
    2050:	e8 a3       	std	Y+32, r30	; 0x20
    2052:	f0 e1       	ldi	r31, 0x10	; 16
    2054:	fa a3       	std	Y+34, r31	; 0x22
    2056:	e8 a1       	ldd	r30, Y+32	; 0x20
    2058:	f9 a1       	ldd	r31, Y+33	; 0x21
    205a:	00 80       	ld	r0, Z
    205c:	88 a1       	ldd	r24, Y+32	; 0x20
    205e:	99 a1       	ldd	r25, Y+33	; 0x21
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	99 a3       	std	Y+33, r25	; 0x21
    2064:	88 a3       	std	Y+32, r24	; 0x20
    2066:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2068:	ff 8d       	ldd	r31, Y+31	; 0x1f
    206a:	00 82       	st	Z, r0
    206c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	9f 8f       	std	Y+31, r25	; 0x1f
    2074:	8e 8f       	std	Y+30, r24	; 0x1e
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	91 50       	subi	r25, 0x01	; 1
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	ea a1       	ldd	r30, Y+34	; 0x22
    207e:	ee 23       	and	r30, r30
    2080:	51 f7       	brne	.-44     	; 0x2056 <HKeyPad_u8GetKey+0x54>

	u8 flag = 0;
    2082:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8ColIterator=0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++)
    2084:	1b 82       	std	Y+3, r1	; 0x03
    2086:	6b c0       	rjmp	.+214    	; 0x215e <HKeyPad_u8GetKey+0x15c>
	{
		MDIO_Error_State_tSetPinValue(COL_PORT, Col_array[Local_u8ColIterator],DIO_LOW);
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	ce 01       	movw	r24, r28
    2090:	06 96       	adiw	r24, 0x06	; 6
    2092:	fc 01       	movw	r30, r24
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	90 81       	ld	r25, Z
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	69 2f       	mov	r22, r25
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>

		for(Local_u8RowIterator=0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++)
    20a4:	1a 82       	std	Y+2, r1	; 0x02
    20a6:	43 c0       	rjmp	.+134    	; 0x212e <HKeyPad_u8GetKey+0x12c>
		{
			MDIO_Error_State_tGetPinValue(ROW_PORT,Row_array[Local_u8RowIterator],&Local_u8KeyIsPressed);
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	ce 01       	movw	r24, r28
    20b0:	0a 96       	adiw	r24, 0x0a	; 10
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	90 81       	ld	r25, Z
    20ba:	9e 01       	movw	r18, r28
    20bc:	2b 5f       	subi	r18, 0xFB	; 251
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	69 2f       	mov	r22, r25
    20c4:	a9 01       	movw	r20, r18
    20c6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_Error_State_tGetPinValue>

			if(Local_u8KeyIsPressed==PRESSED)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	88 23       	and	r24, r24
    20ce:	61 f5       	brne	.+88     	; 0x2128 <HKeyPad_u8GetKey+0x126>
			{
				Local_u8PressedKey = Keypad_arr[Local_u8RowIterator][Local_u8ColIterator];
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	48 2f       	mov	r20, r24
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	ce 01       	movw	r24, r28
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	82 0f       	add	r24, r18
    20ea:	93 1f       	adc	r25, r19
    20ec:	84 0f       	add	r24, r20
    20ee:	95 1f       	adc	r25, r21
    20f0:	fc 01       	movw	r30, r24
    20f2:	3d 96       	adiw	r30, 0x0d	; 13
    20f4:	80 81       	ld	r24, Z
    20f6:	8c 83       	std	Y+4, r24	; 0x04
    20f8:	11 c0       	rjmp	.+34     	; 0x211c <HKeyPad_u8GetKey+0x11a>
				while(Local_u8KeyIsPressed==PRESSED)
				{
					MDIO_Error_State_tGetPinValue(ROW_PORT,Row_array[Local_u8RowIterator],&Local_u8KeyIsPressed);
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	ce 01       	movw	r24, r28
    2102:	0a 96       	adiw	r24, 0x0a	; 10
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	90 81       	ld	r25, Z
    210c:	9e 01       	movw	r18, r28
    210e:	2b 5f       	subi	r18, 0xFB	; 251
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	69 2f       	mov	r22, r25
    2116:	a9 01       	movw	r20, r18
    2118:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_Error_State_tGetPinValue>
			MDIO_Error_State_tGetPinValue(ROW_PORT,Row_array[Local_u8RowIterator],&Local_u8KeyIsPressed);

			if(Local_u8KeyIsPressed==PRESSED)
			{
				Local_u8PressedKey = Keypad_arr[Local_u8RowIterator][Local_u8ColIterator];
				while(Local_u8KeyIsPressed==PRESSED)
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	88 23       	and	r24, r24
    2120:	61 f3       	breq	.-40     	; 0x20fa <HKeyPad_u8GetKey+0xf8>
				{
					MDIO_Error_State_tGetPinValue(ROW_PORT,Row_array[Local_u8RowIterator],&Local_u8KeyIsPressed);

				}
				flag = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <HKeyPad_u8GetKey+0x134>

	for(Local_u8ColIterator=0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++)
	{
		MDIO_Error_State_tSetPinValue(COL_PORT, Col_array[Local_u8ColIterator],DIO_LOW);

		for(Local_u8RowIterator=0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	8f 5f       	subi	r24, 0xFF	; 255
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	08 f4       	brcc	.+2      	; 0x2136 <HKeyPad_u8GetKey+0x134>
    2134:	b9 cf       	rjmp	.-142    	; 0x20a8 <HKeyPad_u8GetKey+0xa6>
				break;
				//return Local_u8PressedKey;
			}

		}
		MDIO_Error_State_tSetPinValue(COL_PORT,Col_array[Local_u8ColIterator],DIO_HIGH);
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	ce 01       	movw	r24, r28
    213e:	06 96       	adiw	r24, 0x06	; 6
    2140:	fc 01       	movw	r30, r24
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	90 81       	ld	r25, Z
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	69 2f       	mov	r22, r25
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 4a 12 	call	0x2494	; 0x2494 <MDIO_Error_State_tSetPinValue>
		if(flag)
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	88 23       	and	r24, r24
    2156:	39 f4       	brne	.+14     	; 0x2166 <HKeyPad_u8GetKey+0x164>
	u8 Row_array[ROW_SIZE] = {KEYPAD_R0, KEYPAD_R1, KEYPAD_R2, KEYPAD_R3};
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;

	u8 flag = 0;

	for(Local_u8ColIterator=0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++)
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	08 f4       	brcc	.+2      	; 0x2166 <HKeyPad_u8GetKey+0x164>
    2164:	91 cf       	rjmp	.-222    	; 0x2088 <HKeyPad_u8GetKey+0x86>
		{
			break;
		}

	}
	return Local_u8PressedKey;
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2168:	a2 96       	adiw	r28, 0x22	; 34
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <MADC_voidInit>:
#include "MADC_private.h"
#include "MADC_config.h"


void MADC_voidInit (void)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
	/* SELECT V REF */
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2182:	a7 e2       	ldi	r26, 0x27	; 39
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e7 e2       	ldi	r30, 0x27	; 39
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	8f 77       	andi	r24, 0x7F	; 127
    218e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    2190:	a7 e2       	ldi	r26, 0x27	; 39
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e7 e2       	ldi	r30, 0x27	; 39
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	80 64       	ori	r24, 0x40	; 64
    219c:	8c 93       	st	X, r24
	/* SELECT RIGHT ADUJST */
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    219e:	a7 e2       	ldi	r26, 0x27	; 39
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e7 e2       	ldi	r30, 0x27	; 39
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8f 7d       	andi	r24, 0xDF	; 223
    21aa:	8c 93       	st	X, r24
	/*SELECT PRESCALER MCU GRQ  32  */
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    21ac:	a6 e2       	ldi	r26, 0x26	; 38
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e6 e2       	ldi	r30, 0x26	; 38
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	81 60       	ori	r24, 0x01	; 1
    21b8:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    21ba:	a6 e2       	ldi	r26, 0x26	; 38
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e6 e2       	ldi	r30, 0x26	; 38
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8d 7f       	andi	r24, 0xFD	; 253
    21c6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    21c8:	a6 e2       	ldi	r26, 0x26	; 38
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e6 e2       	ldi	r30, 0x26	; 38
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	84 60       	ori	r24, 0x04	; 4
    21d4:	8c 93       	st	X, r24
	/* ADC ENABLE */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    21d6:	a6 e2       	ldi	r26, 0x26	; 38
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e6 e2       	ldi	r30, 0x26	; 38
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	8c 93       	st	X, r24
}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <MADC_u16GetValue>:
u16 MADC_u16GetValue(u8 copy_u8AdcChannel)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <MADC_u16GetValue+0x6>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	89 83       	std	Y+1, r24	; 0x01
	/* clear the selection bits  */
	ADMUX&=0b1100000;
    21f6:	a7 e2       	ldi	r26, 0x27	; 39
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e7 e2       	ldi	r30, 0x27	; 39
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	80 76       	andi	r24, 0x60	; 96
    2202:	8c 93       	st	X, r24
	/* select ADC channel */
	ADMUX|=copy_u8AdcChannel;
    2204:	a7 e2       	ldi	r26, 0x27	; 39
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e7 e2       	ldi	r30, 0x27	; 39
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	90 81       	ld	r25, Z
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	89 2b       	or	r24, r25
    2212:	8c 93       	st	X, r24
	/* ADC start conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2214:	a6 e2       	ldi	r26, 0x26	; 38
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e6 e2       	ldi	r30, 0x26	; 38
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	80 64       	ori	r24, 0x40	; 64
    2220:	8c 93       	st	X, r24
	/* busy wait until ADC complete conversion */
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    2222:	e6 e2       	ldi	r30, 0x26	; 38
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
	/* clear ADC flag */
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    2228:	a6 e2       	ldi	r26, 0x26	; 38
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e6 e2       	ldi	r30, 0x26	; 38
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 61       	ori	r24, 0x10	; 16
    2234:	8c 93       	st	X, r24

	return ADC_DATA_REG;
    2236:	e4 e2       	ldi	r30, 0x24	; 36
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01


}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <PORT_voidInit>:
#include "MDIO_cnfig.h"
#include "MDIO_private.h"


void PORT_voidInit (void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    2250:	ea e3       	ldi	r30, 0x3A	; 58
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	8f ef       	ldi	r24, 0xFF	; 255
    2256:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2258:	e7 e3       	ldi	r30, 0x37	; 55
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8f e2       	ldi	r24, 0x2F	; 47
    225e:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    2260:	e4 e3       	ldi	r30, 0x34	; 52
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    2268:	e1 e3       	ldi	r30, 0x31	; 49
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	80 83       	st	Z, r24

	PORTA =PORTA_VALUE;
    2270:	eb e3       	ldi	r30, 0x3B	; 59
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	80 83       	st	Z, r24
	PORTB =PORTB_VALUE;
    2278:	e8 e3       	ldi	r30, 0x38	; 56
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	10 82       	st	Z, r1
	PORTC =PORTC_VALUE;
    227e:	e5 e3       	ldi	r30, 0x35	; 53
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	10 82       	st	Z, r1


	PORTD = PORTD_VALUE;
    2284:	e2 e3       	ldi	r30, 0x32	; 50
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	10 82       	st	Z, r1
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <MDIO_voidSetPinDirection>:



void MDIO_voidSetPinDirection (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	27 97       	sbiw	r28, 0x07	; 7
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	6a 83       	std	Y+2, r22	; 0x02
    22a8:	4b 83       	std	Y+3, r20	; 0x03


	if(copy_u8Mode==DIO_INTPUT)
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	88 23       	and	r24, r24
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <MDIO_voidSetPinDirection+0x22>
    22b0:	75 c0       	rjmp	.+234    	; 0x239c <MDIO_voidSetPinDirection+0x10c>
	{
		switch(copy_u8Port)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3f 83       	std	Y+7, r19	; 0x07
    22ba:	2e 83       	std	Y+6, r18	; 0x06
    22bc:	8e 81       	ldd	r24, Y+6	; 0x06
    22be:	9f 81       	ldd	r25, Y+7	; 0x07
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	91 05       	cpc	r25, r1
    22c4:	61 f1       	breq	.+88     	; 0x231e <MDIO_voidSetPinDirection+0x8e>
    22c6:	2e 81       	ldd	r18, Y+6	; 0x06
    22c8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ca:	23 30       	cpi	r18, 0x03	; 3
    22cc:	31 05       	cpc	r19, r1
    22ce:	34 f4       	brge	.+12     	; 0x22dc <MDIO_voidSetPinDirection+0x4c>
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	91 05       	cpc	r25, r1
    22d8:	69 f0       	breq	.+26     	; 0x22f4 <MDIO_voidSetPinDirection+0x64>
    22da:	d3 c0       	rjmp	.+422    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
    22dc:	2e 81       	ldd	r18, Y+6	; 0x06
    22de:	3f 81       	ldd	r19, Y+7	; 0x07
    22e0:	23 30       	cpi	r18, 0x03	; 3
    22e2:	31 05       	cpc	r19, r1
    22e4:	89 f1       	breq	.+98     	; 0x2348 <MDIO_voidSetPinDirection+0xb8>
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <MDIO_voidSetPinDirection+0x62>
    22f0:	40 c0       	rjmp	.+128    	; 0x2372 <MDIO_voidSetPinDirection+0xe2>
    22f2:	c7 c0       	rjmp	.+398    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : CLR_BIT(DDRA,copy_u8Pin);break;
    22f4:	aa e3       	ldi	r26, 0x3A	; 58
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	ea e3       	ldi	r30, 0x3A	; 58
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <MDIO_voidSetPinDirection+0x82>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <MDIO_voidSetPinDirection+0x7e>
    2316:	80 95       	com	r24
    2318:	84 23       	and	r24, r20
    231a:	8c 93       	st	X, r24
    231c:	b2 c0       	rjmp	.+356    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : CLR_BIT(DDRB,copy_u8Pin);break;
    231e:	a7 e3       	ldi	r26, 0x37	; 55
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e7 e3       	ldi	r30, 0x37	; 55
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	48 2f       	mov	r20, r24
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	02 2e       	mov	r0, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <MDIO_voidSetPinDirection+0xac>
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	0a 94       	dec	r0
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <MDIO_voidSetPinDirection+0xa8>
    2340:	80 95       	com	r24
    2342:	84 23       	and	r24, r20
    2344:	8c 93       	st	X, r24
    2346:	9d c0       	rjmp	.+314    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : CLR_BIT(DDRC,copy_u8Pin);break;
    2348:	a4 e3       	ldi	r26, 0x34	; 52
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e4 e3       	ldi	r30, 0x34	; 52
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	48 2f       	mov	r20, r24
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 2e       	mov	r0, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <MDIO_voidSetPinDirection+0xd6>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <MDIO_voidSetPinDirection+0xd2>
    236a:	80 95       	com	r24
    236c:	84 23       	and	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	88 c0       	rjmp	.+272    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : CLR_BIT(DDRD,copy_u8Pin);break;
    2372:	a1 e3       	ldi	r26, 0x31	; 49
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e1 e3       	ldi	r30, 0x31	; 49
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <MDIO_voidSetPinDirection+0x100>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <MDIO_voidSetPinDirection+0xfc>
    2394:	80 95       	com	r24
    2396:	84 23       	and	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	73 c0       	rjmp	.+230    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		default : break;

		}
	}
	else if (copy_u8Mode==DIO_OUTPUT)
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <MDIO_voidSetPinDirection+0x114>
    23a2:	6f c0       	rjmp	.+222    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
	{
		switch(copy_u8Port)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	3d 83       	std	Y+5, r19	; 0x05
    23ac:	2c 83       	std	Y+4, r18	; 0x04
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	91 05       	cpc	r25, r1
    23b6:	51 f1       	breq	.+84     	; 0x240c <MDIO_voidSetPinDirection+0x17c>
    23b8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	23 30       	cpi	r18, 0x03	; 3
    23be:	31 05       	cpc	r19, r1
    23c0:	34 f4       	brge	.+12     	; 0x23ce <MDIO_voidSetPinDirection+0x13e>
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	61 f0       	breq	.+24     	; 0x23e4 <MDIO_voidSetPinDirection+0x154>
    23cc:	5a c0       	rjmp	.+180    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
    23ce:	2c 81       	ldd	r18, Y+4	; 0x04
    23d0:	3d 81       	ldd	r19, Y+5	; 0x05
    23d2:	23 30       	cpi	r18, 0x03	; 3
    23d4:	31 05       	cpc	r19, r1
    23d6:	71 f1       	breq	.+92     	; 0x2434 <MDIO_voidSetPinDirection+0x1a4>
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	84 30       	cpi	r24, 0x04	; 4
    23de:	91 05       	cpc	r25, r1
    23e0:	e9 f1       	breq	.+122    	; 0x245c <MDIO_voidSetPinDirection+0x1cc>
    23e2:	4f c0       	rjmp	.+158    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : SET_BIT(DDRA,copy_u8Pin);break;
    23e4:	aa e3       	ldi	r26, 0x3A	; 58
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ea e3       	ldi	r30, 0x3A	; 58
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <MDIO_voidSetPinDirection+0x172>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <MDIO_voidSetPinDirection+0x16e>
    2406:	84 2b       	or	r24, r20
    2408:	8c 93       	st	X, r24
    240a:	3b c0       	rjmp	.+118    	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : SET_BIT(DDRB,copy_u8Pin);break;
    240c:	a7 e3       	ldi	r26, 0x37	; 55
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e7 e3       	ldi	r30, 0x37	; 55
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 2e       	mov	r0, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <MDIO_voidSetPinDirection+0x19a>
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <MDIO_voidSetPinDirection+0x196>
    242e:	84 2b       	or	r24, r20
    2430:	8c 93       	st	X, r24
    2432:	27 c0       	rjmp	.+78     	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : SET_BIT(DDRC,copy_u8Pin);break;
    2434:	a4 e3       	ldi	r26, 0x34	; 52
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e4 e3       	ldi	r30, 0x34	; 52
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <MDIO_voidSetPinDirection+0x1c2>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <MDIO_voidSetPinDirection+0x1be>
    2456:	84 2b       	or	r24, r20
    2458:	8c 93       	st	X, r24
    245a:	13 c0       	rjmp	.+38     	; 0x2482 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : SET_BIT(DDRD,copy_u8Pin);break;
    245c:	a1 e3       	ldi	r26, 0x31	; 49
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e1 e3       	ldi	r30, 0x31	; 49
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <MDIO_voidSetPinDirection+0x1ea>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <MDIO_voidSetPinDirection+0x1e6>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24

	}



}
    2482:	27 96       	adiw	r28, 0x07	; 7
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <MDIO_Error_State_tSetPinValue>:
Error_State_t MDIO_Error_State_tSetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	28 97       	sbiw	r28, 0x08	; 8
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	8a 83       	std	Y+2, r24	; 0x02
    24aa:	6b 83       	std	Y+3, r22	; 0x03
    24ac:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    24ae:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	88 30       	cpi	r24, 0x08	; 8
    24b4:	18 f0       	brcs	.+6      	; 0x24bc <MDIO_Error_State_tSetPinValue+0x28>
	{
		Error_State =Return_NOK;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	ec c0       	rjmp	.+472    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
	}
	else
	{
		if(copy_u8Mode==DIO_LOW)
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <MDIO_Error_State_tSetPinValue+0x30>
    24c2:	75 c0       	rjmp	.+234    	; 0x25ae <MDIO_Error_State_tSetPinValue+0x11a>
		{
			switch(copy_u8Port)
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	38 87       	std	Y+8, r19	; 0x08
    24cc:	2f 83       	std	Y+7, r18	; 0x07
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	91 05       	cpc	r25, r1
    24d6:	61 f1       	breq	.+88     	; 0x2530 <MDIO_Error_State_tSetPinValue+0x9c>
    24d8:	2f 81       	ldd	r18, Y+7	; 0x07
    24da:	38 85       	ldd	r19, Y+8	; 0x08
    24dc:	23 30       	cpi	r18, 0x03	; 3
    24de:	31 05       	cpc	r19, r1
    24e0:	34 f4       	brge	.+12     	; 0x24ee <MDIO_Error_State_tSetPinValue+0x5a>
    24e2:	8f 81       	ldd	r24, Y+7	; 0x07
    24e4:	98 85       	ldd	r25, Y+8	; 0x08
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	91 05       	cpc	r25, r1
    24ea:	69 f0       	breq	.+26     	; 0x2506 <MDIO_Error_State_tSetPinValue+0x72>
    24ec:	d3 c0       	rjmp	.+422    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
    24ee:	2f 81       	ldd	r18, Y+7	; 0x07
    24f0:	38 85       	ldd	r19, Y+8	; 0x08
    24f2:	23 30       	cpi	r18, 0x03	; 3
    24f4:	31 05       	cpc	r19, r1
    24f6:	89 f1       	breq	.+98     	; 0x255a <MDIO_Error_State_tSetPinValue+0xc6>
    24f8:	8f 81       	ldd	r24, Y+7	; 0x07
    24fa:	98 85       	ldd	r25, Y+8	; 0x08
    24fc:	84 30       	cpi	r24, 0x04	; 4
    24fe:	91 05       	cpc	r25, r1
    2500:	09 f4       	brne	.+2      	; 0x2504 <MDIO_Error_State_tSetPinValue+0x70>
    2502:	40 c0       	rjmp	.+128    	; 0x2584 <MDIO_Error_State_tSetPinValue+0xf0>
    2504:	c7 c0       	rjmp	.+398    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_u8Pin);break;
    2506:	ab e3       	ldi	r26, 0x3B	; 59
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	eb e3       	ldi	r30, 0x3B	; 59
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	48 2f       	mov	r20, r24
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	02 2e       	mov	r0, r18
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <MDIO_Error_State_tSetPinValue+0x90>
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	0a 94       	dec	r0
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <MDIO_Error_State_tSetPinValue+0x8c>
    2528:	80 95       	com	r24
    252a:	84 23       	and	r24, r20
    252c:	8c 93       	st	X, r24
    252e:	b2 c0       	rjmp	.+356    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : CLR_BIT(PORTB,copy_u8Pin);break;
    2530:	a8 e3       	ldi	r26, 0x38	; 56
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e8 e3       	ldi	r30, 0x38	; 56
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	48 2f       	mov	r20, r24
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <MDIO_Error_State_tSetPinValue+0xba>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <MDIO_Error_State_tSetPinValue+0xb6>
    2552:	80 95       	com	r24
    2554:	84 23       	and	r24, r20
    2556:	8c 93       	st	X, r24
    2558:	9d c0       	rjmp	.+314    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : CLR_BIT(PORTC,copy_u8Pin);break;
    255a:	a5 e3       	ldi	r26, 0x35	; 53
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e5 e3       	ldi	r30, 0x35	; 53
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	48 2f       	mov	r20, r24
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 2e       	mov	r0, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <MDIO_Error_State_tSetPinValue+0xe4>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	0a 94       	dec	r0
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <MDIO_Error_State_tSetPinValue+0xe0>
    257c:	80 95       	com	r24
    257e:	84 23       	and	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	88 c0       	rjmp	.+272    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : CLR_BIT(PORTD,copy_u8Pin);break;
    2584:	a2 e3       	ldi	r26, 0x32	; 50
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e2 e3       	ldi	r30, 0x32	; 50
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	48 2f       	mov	r20, r24
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	02 2e       	mov	r0, r18
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <MDIO_Error_State_tSetPinValue+0x10e>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <MDIO_Error_State_tSetPinValue+0x10a>
    25a6:	80 95       	com	r24
    25a8:	84 23       	and	r24, r20
    25aa:	8c 93       	st	X, r24
    25ac:	73 c0       	rjmp	.+230    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			default : break;

			}
		}
		else if (copy_u8Mode==DIO_HIGH)
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <MDIO_Error_State_tSetPinValue+0x122>
    25b4:	6f c0       	rjmp	.+222    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
		{
			switch(copy_u8Port)
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	3e 83       	std	Y+6, r19	; 0x06
    25be:	2d 83       	std	Y+5, r18	; 0x05
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	82 30       	cpi	r24, 0x02	; 2
    25c6:	91 05       	cpc	r25, r1
    25c8:	51 f1       	breq	.+84     	; 0x261e <MDIO_Error_State_tSetPinValue+0x18a>
    25ca:	2d 81       	ldd	r18, Y+5	; 0x05
    25cc:	3e 81       	ldd	r19, Y+6	; 0x06
    25ce:	23 30       	cpi	r18, 0x03	; 3
    25d0:	31 05       	cpc	r19, r1
    25d2:	34 f4       	brge	.+12     	; 0x25e0 <MDIO_Error_State_tSetPinValue+0x14c>
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	61 f0       	breq	.+24     	; 0x25f6 <MDIO_Error_State_tSetPinValue+0x162>
    25de:	5a c0       	rjmp	.+180    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
    25e0:	2d 81       	ldd	r18, Y+5	; 0x05
    25e2:	3e 81       	ldd	r19, Y+6	; 0x06
    25e4:	23 30       	cpi	r18, 0x03	; 3
    25e6:	31 05       	cpc	r19, r1
    25e8:	71 f1       	breq	.+92     	; 0x2646 <MDIO_Error_State_tSetPinValue+0x1b2>
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	91 05       	cpc	r25, r1
    25f2:	e9 f1       	breq	.+122    	; 0x266e <MDIO_Error_State_tSetPinValue+0x1da>
    25f4:	4f c0       	rjmp	.+158    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_u8Pin);break;
    25f6:	ab e3       	ldi	r26, 0x3B	; 59
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	eb e3       	ldi	r30, 0x3B	; 59
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	48 2f       	mov	r20, r24
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	02 2e       	mov	r0, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <MDIO_Error_State_tSetPinValue+0x180>
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <MDIO_Error_State_tSetPinValue+0x17c>
    2618:	84 2b       	or	r24, r20
    261a:	8c 93       	st	X, r24
    261c:	3b c0       	rjmp	.+118    	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : SET_BIT(PORTB,copy_u8Pin);break;
    261e:	a8 e3       	ldi	r26, 0x38	; 56
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e8 e3       	ldi	r30, 0x38	; 56
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 2e       	mov	r0, r18
    2636:	02 c0       	rjmp	.+4      	; 0x263c <MDIO_Error_State_tSetPinValue+0x1a8>
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	0a 94       	dec	r0
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <MDIO_Error_State_tSetPinValue+0x1a4>
    2640:	84 2b       	or	r24, r20
    2642:	8c 93       	st	X, r24
    2644:	27 c0       	rjmp	.+78     	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : SET_BIT(PORTC,copy_u8Pin);break;
    2646:	a5 e3       	ldi	r26, 0x35	; 53
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e3       	ldi	r30, 0x35	; 53
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	48 2f       	mov	r20, r24
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	02 2e       	mov	r0, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <MDIO_Error_State_tSetPinValue+0x1d0>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	0a 94       	dec	r0
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <MDIO_Error_State_tSetPinValue+0x1cc>
    2668:	84 2b       	or	r24, r20
    266a:	8c 93       	st	X, r24
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : SET_BIT(PORTD,copy_u8Pin);break;
    266e:	a2 e3       	ldi	r26, 0x32	; 50
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e2 e3       	ldi	r30, 0x32	; 50
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 2e       	mov	r0, r18
    2686:	02 c0       	rjmp	.+4      	; 0x268c <MDIO_Error_State_tSetPinValue+0x1f8>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <MDIO_Error_State_tSetPinValue+0x1f4>
    2690:	84 2b       	or	r24, r20
    2692:	8c 93       	st	X, r24

			}

		}
	}
	return Error_State;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	28 96       	adiw	r28, 0x08	; 8
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <MDIO_Error_State_tGetPinValue>:

Error_State_t MDIO_Error_State_tGetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 *p_u8Value )
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	27 97       	sbiw	r28, 0x07	; 7
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	6b 83       	std	Y+3, r22	; 0x03
    26c0:	5d 83       	std	Y+5, r21	; 0x05
    26c2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    26c4:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	88 30       	cpi	r24, 0x08	; 8
    26ca:	18 f0       	brcs	.+6      	; 0x26d2 <MDIO_Error_State_tGetPinValue+0x2a>
	{
		Error_State =Return_NOK;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	70 c0       	rjmp	.+224    	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
	}
	else
	{
		switch(copy_u8Port)
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	3f 83       	std	Y+7, r19	; 0x07
    26da:	2e 83       	std	Y+6, r18	; 0x06
    26dc:	4e 81       	ldd	r20, Y+6	; 0x06
    26de:	5f 81       	ldd	r21, Y+7	; 0x07
    26e0:	42 30       	cpi	r20, 0x02	; 2
    26e2:	51 05       	cpc	r21, r1
    26e4:	59 f1       	breq	.+86     	; 0x273c <MDIO_Error_State_tGetPinValue+0x94>
    26e6:	8e 81       	ldd	r24, Y+6	; 0x06
    26e8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ea:	83 30       	cpi	r24, 0x03	; 3
    26ec:	91 05       	cpc	r25, r1
    26ee:	34 f4       	brge	.+12     	; 0x26fc <MDIO_Error_State_tGetPinValue+0x54>
    26f0:	2e 81       	ldd	r18, Y+6	; 0x06
    26f2:	3f 81       	ldd	r19, Y+7	; 0x07
    26f4:	21 30       	cpi	r18, 0x01	; 1
    26f6:	31 05       	cpc	r19, r1
    26f8:	69 f0       	breq	.+26     	; 0x2714 <MDIO_Error_State_tGetPinValue+0x6c>
    26fa:	5b c0       	rjmp	.+182    	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
    26fc:	4e 81       	ldd	r20, Y+6	; 0x06
    26fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2700:	43 30       	cpi	r20, 0x03	; 3
    2702:	51 05       	cpc	r21, r1
    2704:	79 f1       	breq	.+94     	; 0x2764 <MDIO_Error_State_tGetPinValue+0xbc>
    2706:	8e 81       	ldd	r24, Y+6	; 0x06
    2708:	9f 81       	ldd	r25, Y+7	; 0x07
    270a:	84 30       	cpi	r24, 0x04	; 4
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <MDIO_Error_State_tGetPinValue+0x6a>
    2710:	3d c0       	rjmp	.+122    	; 0x278c <MDIO_Error_State_tGetPinValue+0xe4>
    2712:	4f c0       	rjmp	.+158    	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
		{
		case DIO_PORTA : *p_u8Value =GET_BIT(PINA,copy_u8Pin);break;
    2714:	e9 e3       	ldi	r30, 0x39	; 57
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a9 01       	movw	r20, r18
    2726:	02 c0       	rjmp	.+4      	; 0x272c <MDIO_Error_State_tGetPinValue+0x84>
    2728:	55 95       	asr	r21
    272a:	47 95       	ror	r20
    272c:	8a 95       	dec	r24
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <MDIO_Error_State_tGetPinValue+0x80>
    2730:	ca 01       	movw	r24, r20
    2732:	81 70       	andi	r24, 0x01	; 1
    2734:	ec 81       	ldd	r30, Y+4	; 0x04
    2736:	fd 81       	ldd	r31, Y+5	; 0x05
    2738:	80 83       	st	Z, r24
    273a:	3b c0       	rjmp	.+118    	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTB : *p_u8Value =GET_BIT(PINB,copy_u8Pin);break;
    273c:	e6 e3       	ldi	r30, 0x36	; 54
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a9 01       	movw	r20, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <MDIO_Error_State_tGetPinValue+0xac>
    2750:	55 95       	asr	r21
    2752:	47 95       	ror	r20
    2754:	8a 95       	dec	r24
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <MDIO_Error_State_tGetPinValue+0xa8>
    2758:	ca 01       	movw	r24, r20
    275a:	81 70       	andi	r24, 0x01	; 1
    275c:	ec 81       	ldd	r30, Y+4	; 0x04
    275e:	fd 81       	ldd	r31, Y+5	; 0x05
    2760:	80 83       	st	Z, r24
    2762:	27 c0       	rjmp	.+78     	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTC : *p_u8Value =GET_BIT(PINC,copy_u8Pin);break;
    2764:	e3 e3       	ldi	r30, 0x33	; 51
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a9 01       	movw	r20, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <MDIO_Error_State_tGetPinValue+0xd4>
    2778:	55 95       	asr	r21
    277a:	47 95       	ror	r20
    277c:	8a 95       	dec	r24
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <MDIO_Error_State_tGetPinValue+0xd0>
    2780:	ca 01       	movw	r24, r20
    2782:	81 70       	andi	r24, 0x01	; 1
    2784:	ec 81       	ldd	r30, Y+4	; 0x04
    2786:	fd 81       	ldd	r31, Y+5	; 0x05
    2788:	80 83       	st	Z, r24
    278a:	13 c0       	rjmp	.+38     	; 0x27b2 <MDIO_Error_State_tGetPinValue+0x10a>
		case DIO_PORTD : *p_u8Value =GET_BIT(PIND,copy_u8Pin);break;
    278c:	e0 e3       	ldi	r30, 0x30	; 48
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a9 01       	movw	r20, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <MDIO_Error_State_tGetPinValue+0xfc>
    27a0:	55 95       	asr	r21
    27a2:	47 95       	ror	r20
    27a4:	8a 95       	dec	r24
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <MDIO_Error_State_tGetPinValue+0xf8>
    27a8:	ca 01       	movw	r24, r20
    27aa:	81 70       	andi	r24, 0x01	; 1
    27ac:	ec 81       	ldd	r30, Y+4	; 0x04
    27ae:	fd 81       	ldd	r31, Y+5	; 0x05
    27b0:	80 83       	st	Z, r24
		default : break;
		}
	}
	return Error_State;
    27b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    27b4:	27 96       	adiw	r28, 0x07	; 7
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <MDIO_EnumSetPortValue>:

Error_State_t MDIO_EnumSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <MDIO_EnumSetPortValue+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <MDIO_EnumSetPortValue+0x8>
    27ce:	0f 92       	push	r0
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	8a 83       	std	Y+2, r24	; 0x02
    27d6:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    27d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	88 30       	cpi	r24, 0x08	; 8
    27de:	18 f0       	brcs	.+6      	; 0x27e6 <MDIO_EnumSetPortValue+0x20>
	{
		Error_State = Return_NOK;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	36 c0       	rjmp	.+108    	; 0x2852 <MDIO_EnumSetPortValue+0x8c>
	}
	else
	{
		switch(Copy_u8Port)
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3d 83       	std	Y+5, r19	; 0x05
    27ee:	2c 83       	std	Y+4, r18	; 0x04
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	91 05       	cpc	r25, r1
    27f8:	d9 f0       	breq	.+54     	; 0x2830 <MDIO_EnumSetPortValue+0x6a>
    27fa:	2c 81       	ldd	r18, Y+4	; 0x04
    27fc:	3d 81       	ldd	r19, Y+5	; 0x05
    27fe:	23 30       	cpi	r18, 0x03	; 3
    2800:	31 05       	cpc	r19, r1
    2802:	34 f4       	brge	.+12     	; 0x2810 <MDIO_EnumSetPortValue+0x4a>
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	9d 81       	ldd	r25, Y+5	; 0x05
    2808:	81 30       	cpi	r24, 0x01	; 1
    280a:	91 05       	cpc	r25, r1
    280c:	61 f0       	breq	.+24     	; 0x2826 <MDIO_EnumSetPortValue+0x60>
    280e:	1f c0       	rjmp	.+62     	; 0x284e <MDIO_EnumSetPortValue+0x88>
    2810:	2c 81       	ldd	r18, Y+4	; 0x04
    2812:	3d 81       	ldd	r19, Y+5	; 0x05
    2814:	23 30       	cpi	r18, 0x03	; 3
    2816:	31 05       	cpc	r19, r1
    2818:	81 f0       	breq	.+32     	; 0x283a <MDIO_EnumSetPortValue+0x74>
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	9d 81       	ldd	r25, Y+5	; 0x05
    281e:	84 30       	cpi	r24, 0x04	; 4
    2820:	91 05       	cpc	r25, r1
    2822:	81 f0       	breq	.+32     	; 0x2844 <MDIO_EnumSetPortValue+0x7e>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <MDIO_EnumSetPortValue+0x88>
		{
		case DIO_PORTA: PORTA=Copy_u8Value; break;
    2826:	eb e3       	ldi	r30, 0x3B	; 59
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	80 83       	st	Z, r24
    282e:	11 c0       	rjmp	.+34     	; 0x2852 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTB: PORTB=Copy_u8Value; break;
    2830:	e8 e3       	ldi	r30, 0x38	; 56
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	80 83       	st	Z, r24
    2838:	0c c0       	rjmp	.+24     	; 0x2852 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTC: PORTC=Copy_u8Value; break;
    283a:	e5 e3       	ldi	r30, 0x35	; 53
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	80 83       	st	Z, r24
    2842:	07 c0       	rjmp	.+14     	; 0x2852 <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTD: PORTD=Copy_u8Value; break;
    2844:	e2 e3       	ldi	r30, 0x32	; 50
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	80 83       	st	Z, r24
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <MDIO_EnumSetPortValue+0x8c>
		default: Error_State = Return_NOK; break;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    2852:	89 81       	ldd	r24, Y+1	; 0x01
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <MDIO_EnumGetPortValue>:


Error_State_t MDIO_EnumGetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <MDIO_EnumGetPortValue+0x6>
    286a:	00 d0       	rcall	.+0      	; 0x286c <MDIO_EnumGetPortValue+0x8>
    286c:	00 d0       	rcall	.+0      	; 0x286e <MDIO_EnumGetPortValue+0xa>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	8a 83       	std	Y+2, r24	; 0x02
    2874:	7c 83       	std	Y+4, r23	; 0x04
    2876:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    2878:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	88 30       	cpi	r24, 0x08	; 8
    287e:	18 f0       	brcs	.+6      	; 0x2886 <MDIO_EnumGetPortValue+0x22>
	{
		Error_State = Return_NOK;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	3e c0       	rjmp	.+124    	; 0x2902 <MDIO_EnumGetPortValue+0x9e>
	}
	else
	{
		switch(Copy_u8Port)
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	3e 83       	std	Y+6, r19	; 0x06
    288e:	2d 83       	std	Y+5, r18	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	91 05       	cpc	r25, r1
    2898:	e9 f0       	breq	.+58     	; 0x28d4 <MDIO_EnumGetPortValue+0x70>
    289a:	2d 81       	ldd	r18, Y+5	; 0x05
    289c:	3e 81       	ldd	r19, Y+6	; 0x06
    289e:	23 30       	cpi	r18, 0x03	; 3
    28a0:	31 05       	cpc	r19, r1
    28a2:	34 f4       	brge	.+12     	; 0x28b0 <MDIO_EnumGetPortValue+0x4c>
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	91 05       	cpc	r25, r1
    28ac:	61 f0       	breq	.+24     	; 0x28c6 <MDIO_EnumGetPortValue+0x62>
    28ae:	27 c0       	rjmp	.+78     	; 0x28fe <MDIO_EnumGetPortValue+0x9a>
    28b0:	2d 81       	ldd	r18, Y+5	; 0x05
    28b2:	3e 81       	ldd	r19, Y+6	; 0x06
    28b4:	23 30       	cpi	r18, 0x03	; 3
    28b6:	31 05       	cpc	r19, r1
    28b8:	a1 f0       	breq	.+40     	; 0x28e2 <MDIO_EnumGetPortValue+0x7e>
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	91 05       	cpc	r25, r1
    28c2:	b1 f0       	breq	.+44     	; 0x28f0 <MDIO_EnumGetPortValue+0x8c>
    28c4:	1c c0       	rjmp	.+56     	; 0x28fe <MDIO_EnumGetPortValue+0x9a>
		{
		case DIO_PORTA: *P_u8Value=PINA; break;
    28c6:	e9 e3       	ldi	r30, 0x39	; 57
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	eb 81       	ldd	r30, Y+3	; 0x03
    28ce:	fc 81       	ldd	r31, Y+4	; 0x04
    28d0:	80 83       	st	Z, r24
    28d2:	17 c0       	rjmp	.+46     	; 0x2902 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTB: *P_u8Value=PINB; break;
    28d4:	e6 e3       	ldi	r30, 0x36	; 54
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	eb 81       	ldd	r30, Y+3	; 0x03
    28dc:	fc 81       	ldd	r31, Y+4	; 0x04
    28de:	80 83       	st	Z, r24
    28e0:	10 c0       	rjmp	.+32     	; 0x2902 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTC: *P_u8Value=PINC; break;
    28e2:	e3 e3       	ldi	r30, 0x33	; 51
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	80 83       	st	Z, r24
    28ee:	09 c0       	rjmp	.+18     	; 0x2902 <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTD: *P_u8Value=PIND; break;
    28f0:	e0 e3       	ldi	r30, 0x30	; 48
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	eb 81       	ldd	r30, Y+3	; 0x03
    28f8:	fc 81       	ldd	r31, Y+4	; 0x04
    28fa:	80 83       	st	Z, r24
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <MDIO_EnumGetPortValue+0x9e>
		default: Error_State = Return_NOK; break;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    2902:	89 81       	ldd	r24, Y+1	; 0x01
}
    2904:	26 96       	adiw	r28, 0x06	; 6
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <MDIO_Error_state_tTogglePinValue>:

Error_State_t MDIO_Error_state_tTogglePinValue(u8 copy_u8port,u8 copy_u8pin)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <MDIO_Error_state_tTogglePinValue+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <MDIO_Error_state_tTogglePinValue+0x8>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state=Return_OK;
    2928:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8pin>PIN7)
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	88 30       	cpi	r24, 0x08	; 8
    292e:	10 f0       	brcs	.+4      	; 0x2934 <MDIO_Error_state_tTogglePinValue+0x1e>
	{
		Error_state=Return_NOK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01
	}
	switch (copy_u8port)
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	3d 83       	std	Y+5, r19	; 0x05
    293c:	2c 83       	std	Y+4, r18	; 0x04
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	9d 81       	ldd	r25, Y+5	; 0x05
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	51 f1       	breq	.+84     	; 0x299c <MDIO_Error_state_tTogglePinValue+0x86>
    2948:	2c 81       	ldd	r18, Y+4	; 0x04
    294a:	3d 81       	ldd	r19, Y+5	; 0x05
    294c:	23 30       	cpi	r18, 0x03	; 3
    294e:	31 05       	cpc	r19, r1
    2950:	34 f4       	brge	.+12     	; 0x295e <MDIO_Error_state_tTogglePinValue+0x48>
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	91 05       	cpc	r25, r1
    295a:	61 f0       	breq	.+24     	; 0x2974 <MDIO_Error_state_tTogglePinValue+0x5e>
    295c:	5b c0       	rjmp	.+182    	; 0x2a14 <MDIO_Error_state_tTogglePinValue+0xfe>
    295e:	2c 81       	ldd	r18, Y+4	; 0x04
    2960:	3d 81       	ldd	r19, Y+5	; 0x05
    2962:	23 30       	cpi	r18, 0x03	; 3
    2964:	31 05       	cpc	r19, r1
    2966:	71 f1       	breq	.+92     	; 0x29c4 <MDIO_Error_state_tTogglePinValue+0xae>
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	91 05       	cpc	r25, r1
    2970:	e9 f1       	breq	.+122    	; 0x29ec <MDIO_Error_state_tTogglePinValue+0xd6>
    2972:	50 c0       	rjmp	.+160    	; 0x2a14 <MDIO_Error_state_tTogglePinValue+0xfe>
	{
	case DIO_PORTA : TOG_BIT(PORTA, copy_u8pin); break;
    2974:	ab e3       	ldi	r26, 0x3B	; 59
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	eb e3       	ldi	r30, 0x3B	; 59
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	48 2f       	mov	r20, r24
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	02 2e       	mov	r0, r18
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <MDIO_Error_state_tTogglePinValue+0x7c>
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	0a 94       	dec	r0
    2994:	e2 f7       	brpl	.-8      	; 0x298e <MDIO_Error_state_tTogglePinValue+0x78>
    2996:	84 27       	eor	r24, r20
    2998:	8c 93       	st	X, r24
    299a:	3e c0       	rjmp	.+124    	; 0x2a18 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTB : TOG_BIT(PORTB, copy_u8pin); break;
    299c:	a8 e3       	ldi	r26, 0x38	; 56
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e8 e3       	ldi	r30, 0x38	; 56
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	48 2f       	mov	r20, r24
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 2e       	mov	r0, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <MDIO_Error_state_tTogglePinValue+0xa4>
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	0a 94       	dec	r0
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <MDIO_Error_state_tTogglePinValue+0xa0>
    29be:	84 27       	eor	r24, r20
    29c0:	8c 93       	st	X, r24
    29c2:	2a c0       	rjmp	.+84     	; 0x2a18 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTC : TOG_BIT(PORTC, copy_u8pin); break;
    29c4:	a5 e3       	ldi	r26, 0x35	; 53
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e5 e3       	ldi	r30, 0x35	; 53
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	48 2f       	mov	r20, r24
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	02 2e       	mov	r0, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <MDIO_Error_state_tTogglePinValue+0xcc>
    29de:	88 0f       	add	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	0a 94       	dec	r0
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <MDIO_Error_state_tTogglePinValue+0xc8>
    29e6:	84 27       	eor	r24, r20
    29e8:	8c 93       	st	X, r24
    29ea:	16 c0       	rjmp	.+44     	; 0x2a18 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTD : TOG_BIT(PORTD, copy_u8pin); break;
    29ec:	a2 e3       	ldi	r26, 0x32	; 50
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e2 e3       	ldi	r30, 0x32	; 50
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	48 2f       	mov	r20, r24
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 2e       	mov	r0, r18
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <MDIO_Error_state_tTogglePinValue+0xf4>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	0a 94       	dec	r0
    2a0c:	e2 f7       	brpl	.-8      	; 0x2a06 <MDIO_Error_state_tTogglePinValue+0xf0>
    2a0e:	84 27       	eor	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <MDIO_Error_state_tTogglePinValue+0x102>
	default:  Error_state=Return_NOK; break;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <MSPI_voidInit>:
#include "MSPI_registers.h"
#include "MSPI_private.h"
#include "MSPI_interface.h"

void MSPI_voidInit(void)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	/*enable SPI*/
   SET_BIT(SPCR,SPCR_SPE);
    2a32:	ad e2       	ldi	r26, 0x2D	; 45
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	ed e2       	ldi	r30, 0x2D	; 45
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 64       	ori	r24, 0x40	; 64
    2a3e:	8c 93       	st	X, r24

   /*selcet data order LSB send first*/
   SET_BIT(SPCR,SPCR_DORD);
    2a40:	ad e2       	ldi	r26, 0x2D	; 45
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	ed e2       	ldi	r30, 0x2D	; 45
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 62       	ori	r24, 0x20	; 32
    2a4c:	8c 93       	st	X, r24
   CLR_BIT(SPCR,SPCR_SPR1);
   CLR_BIT(SPSR ,SPSR_SPI2X);


#elif MSTR_SLAVE ==SLAVE
   CLR_BIT(SPCR,SPCR_MSTR);
    2a4e:	ad e2       	ldi	r26, 0x2D	; 45
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	ed e2       	ldi	r30, 0x2D	; 45
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7e       	andi	r24, 0xEF	; 239
    2a5a:	8c 93       	st	X, r24
#else
#warning "Invalid Input";
#endif

   /*select clock polarity as leading edge is rising*/
    CLR_BIT(SPCR, SPCR_CPOL);
    2a5c:	ad e2       	ldi	r26, 0x2D	; 45
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	ed e2       	ldi	r30, 0x2D	; 45
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	87 7f       	andi	r24, 0xF7	; 247
    2a68:	8c 93       	st	X, r24

    /*select clock phase as setup*/
    SET_BIT(SPCR,SPCR_CPHA);
    2a6a:	ad e2       	ldi	r26, 0x2D	; 45
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ed e2       	ldi	r30, 0x2D	; 45
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	84 60       	ori	r24, 0x04	; 4
    2a76:	8c 93       	st	X, r24

}
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <MSPI_u8Transcive>:
u8 MSPI_u8Transcive(u8 copy_u8Data)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <MSPI_u8Transcive+0x6>
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	89 83       	std	Y+1, r24	; 0x01
    SPDR=copy_u8Data;
    2a8a:	ef e2       	ldi	r30, 0x2F	; 47
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	80 83       	st	Z, r24
    while(GET_BIT(SPSR , SPSR_SPIF)==0);
    2a92:	ee e2       	ldi	r30, 0x2E	; 46
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    return SPDR;
    2a98:	ef e2       	ldi	r30, 0x2F	; 47
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z


}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <main>:
#include "MADC_interface.h"
#include "MSPI_interface.h"
#include "App.h"

int main()
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <main+0x6>
    2aae:	0f 92       	push	r0
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    2ab4:	0e 94 24 11 	call	0x2248	; 0x2248 <PORT_voidInit>
	CLCD_void_Init();
    2ab8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_void_Init>
	MADC_voidInit();
    2abc:	0e 94 bd 10 	call	0x217a	; 0x217a <MADC_voidInit>
	MSPI_voidInit();
    2ac0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <MSPI_voidInit>
    u8 dummy=80;
    2ac4:	80 e5       	ldi	r24, 0x50	; 80
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    u8 receive_data_LDR;
    u8 LED_value;
	while(1)
	{
		receive_data_LDR=MSPI_u8Transcive(dummy);
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <MSPI_u8Transcive>
    2ace:	8a 83       	std	Y+2, r24	; 0x02
		if(receive_data_LDR==80)
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	80 35       	cpi	r24, 0x50	; 80
    2ad4:	c9 f7       	brne	.-14     	; 0x2ac8 <main+0x20>
		{
			MDIO_EnumSetPortValue(DIO_PORTB,0XFF);
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	6f ef       	ldi	r22, 0xFF	; 255
    2ada:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <MDIO_EnumSetPortValue>
    2ade:	f4 cf       	rjmp	.-24     	; 0x2ac8 <main+0x20>

00002ae0 <__udivmodsi4>:
    2ae0:	a1 e2       	ldi	r26, 0x21	; 33
    2ae2:	1a 2e       	mov	r1, r26
    2ae4:	aa 1b       	sub	r26, r26
    2ae6:	bb 1b       	sub	r27, r27
    2ae8:	fd 01       	movw	r30, r26
    2aea:	0d c0       	rjmp	.+26     	; 0x2b06 <__udivmodsi4_ep>

00002aec <__udivmodsi4_loop>:
    2aec:	aa 1f       	adc	r26, r26
    2aee:	bb 1f       	adc	r27, r27
    2af0:	ee 1f       	adc	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	a2 17       	cp	r26, r18
    2af6:	b3 07       	cpc	r27, r19
    2af8:	e4 07       	cpc	r30, r20
    2afa:	f5 07       	cpc	r31, r21
    2afc:	20 f0       	brcs	.+8      	; 0x2b06 <__udivmodsi4_ep>
    2afe:	a2 1b       	sub	r26, r18
    2b00:	b3 0b       	sbc	r27, r19
    2b02:	e4 0b       	sbc	r30, r20
    2b04:	f5 0b       	sbc	r31, r21

00002b06 <__udivmodsi4_ep>:
    2b06:	66 1f       	adc	r22, r22
    2b08:	77 1f       	adc	r23, r23
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	1a 94       	dec	r1
    2b10:	69 f7       	brne	.-38     	; 0x2aec <__udivmodsi4_loop>
    2b12:	60 95       	com	r22
    2b14:	70 95       	com	r23
    2b16:	80 95       	com	r24
    2b18:	90 95       	com	r25
    2b1a:	9b 01       	movw	r18, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	bd 01       	movw	r22, r26
    2b20:	cf 01       	movw	r24, r30
    2b22:	08 95       	ret

00002b24 <__divmodsi4>:
    2b24:	97 fb       	bst	r25, 7
    2b26:	09 2e       	mov	r0, r25
    2b28:	05 26       	eor	r0, r21
    2b2a:	0e d0       	rcall	.+28     	; 0x2b48 <__divmodsi4_neg1>
    2b2c:	57 fd       	sbrc	r21, 7
    2b2e:	04 d0       	rcall	.+8      	; 0x2b38 <__divmodsi4_neg2>
    2b30:	d7 df       	rcall	.-82     	; 0x2ae0 <__udivmodsi4>
    2b32:	0a d0       	rcall	.+20     	; 0x2b48 <__divmodsi4_neg1>
    2b34:	00 1c       	adc	r0, r0
    2b36:	38 f4       	brcc	.+14     	; 0x2b46 <__divmodsi4_exit>

00002b38 <__divmodsi4_neg2>:
    2b38:	50 95       	com	r21
    2b3a:	40 95       	com	r20
    2b3c:	30 95       	com	r19
    2b3e:	21 95       	neg	r18
    2b40:	3f 4f       	sbci	r19, 0xFF	; 255
    2b42:	4f 4f       	sbci	r20, 0xFF	; 255
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255

00002b46 <__divmodsi4_exit>:
    2b46:	08 95       	ret

00002b48 <__divmodsi4_neg1>:
    2b48:	f6 f7       	brtc	.-4      	; 0x2b46 <__divmodsi4_exit>
    2b4a:	90 95       	com	r25
    2b4c:	80 95       	com	r24
    2b4e:	70 95       	com	r23
    2b50:	61 95       	neg	r22
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	8f 4f       	sbci	r24, 0xFF	; 255
    2b56:	9f 4f       	sbci	r25, 0xFF	; 255
    2b58:	08 95       	ret

00002b5a <__prologue_saves__>:
    2b5a:	2f 92       	push	r2
    2b5c:	3f 92       	push	r3
    2b5e:	4f 92       	push	r4
    2b60:	5f 92       	push	r5
    2b62:	6f 92       	push	r6
    2b64:	7f 92       	push	r7
    2b66:	8f 92       	push	r8
    2b68:	9f 92       	push	r9
    2b6a:	af 92       	push	r10
    2b6c:	bf 92       	push	r11
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	ca 1b       	sub	r28, r26
    2b84:	db 0b       	sbc	r29, r27
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	09 94       	ijmp

00002b92 <__epilogue_restores__>:
    2b92:	2a 88       	ldd	r2, Y+18	; 0x12
    2b94:	39 88       	ldd	r3, Y+17	; 0x11
    2b96:	48 88       	ldd	r4, Y+16	; 0x10
    2b98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ba2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ba4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ba6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ba8:	df 80       	ldd	r13, Y+7	; 0x07
    2baa:	ee 80       	ldd	r14, Y+6	; 0x06
    2bac:	fd 80       	ldd	r15, Y+5	; 0x05
    2bae:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2bb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2bb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2bb6:	ce 0f       	add	r28, r30
    2bb8:	d1 1d       	adc	r29, r1
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	ed 01       	movw	r28, r26
    2bc6:	08 95       	ret

00002bc8 <_exit>:
    2bc8:	f8 94       	cli

00002bca <__stop_program>:
    2bca:	ff cf       	rjmp	.-2      	; 0x2bca <__stop_program>
